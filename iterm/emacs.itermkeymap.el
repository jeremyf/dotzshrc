;; I want the duplicate line feature. In other editors, I had CMD+SHIFT+d.
;; Emacs exposes Super (s-), Hyper (H-). And while my keyboard doesn't have
;; those keys, I can use ITerm to mimic the behavior.
;; See https://www.emacswiki.org/emacs/iTerm2#toc11

(global-set-key (kbd "H-b") 'browse-url-at-point)
(global-set-key (kbd "H-d") 'duplicate-line)
(global-set-key (kbd "H-/") 'comment-line)
(global-set-key (kbd "C-M-/") 'comment-line)
(global-set-key (kbd "H-l") 'goto-line)

;; Invoke `s-a` with CTRL+OPT+CMD+a
;; Invoke `H-a` with CTRL+OPT+a
(progn
     (let ((map (if (boundp 'input-decode-map)
                 input-decode-map
     function-key-map)))
     (define-key map "\e[1;P9"  (kbd "s-a"))
     (define-key map "\e[1;P10" (kbd "s-b"))
     (define-key map "\e[1;P11" (kbd "s-c"))
     (define-key map "\e[1;P12" (kbd "s-d"))
     (define-key map "\e[1;P13" (kbd "s-e"))
     (define-key map "\e[1;P14" (kbd "s-f"))
     (define-key map "\e[1;P15" (kbd "s-g"))
     (define-key map "\e[1;P16" (kbd "s-h"))
     (define-key map "\e[1;P17" (kbd "s-i"))
     (define-key map "\e[1;P18" (kbd "s-j"))
     (define-key map "\e[1;P19" (kbd "s-k"))
     (define-key map "\e[1;P20" (kbd "s-l"))
     (define-key map "\e[1;P21" (kbd "s-m"))
     (define-key map "\e[1;P22" (kbd "s-n"))
     (define-key map "\e[1;P23" (kbd "s-o"))
     (define-key map "\e[1;P24" (kbd "s-p"))
     (define-key map "\e[1;P25" (kbd "s-q"))
     (define-key map "\e[1;P26" (kbd "s-r"))
     (define-key map "\e[1;P27" (kbd "s-s"))
     (define-key map "\e[1;P28" (kbd "s-t"))
     (define-key map "\e[1;P29" (kbd "s-u"))
     (define-key map "\e[1;P30" (kbd "s-v"))
     (define-key map "\e[1;P31" (kbd "s-w"))
     (define-key map "\e[1;P32" (kbd "s-x"))
     (define-key map "\e[1;P33" (kbd "s-y"))
     (define-key map "\e[1;P34" (kbd "s-z"))
     (define-key map "\e[1;P35" (kbd "H-a"))
     (define-key map "\e[1;P36" (kbd "H-b"))
     (define-key map "\e[1;P37" (kbd "H-c"))
     (define-key map "\e[1;P38" (kbd "H-d"))
     (define-key map "\e[1;P39" (kbd "H-e"))
     (define-key map "\e[1;P40" (kbd "H-f"))
     (define-key map "\e[1;P41" (kbd "H-g"))
     (define-key map "\e[1;P42" (kbd "H-h"))
     (define-key map "\e[1;P43" (kbd "H-i"))
     (define-key map "\e[1;P44" (kbd "H-j"))
     (define-key map "\e[1;P45" (kbd "H-k"))
     (define-key map "\e[1;P46" (kbd "H-l"))
     (define-key map "\e[1;P47" (kbd "H-m"))
     (define-key map "\e[1;P48" (kbd "H-n"))
     (define-key map "\e[1;P49" (kbd "H-o"))
     (define-key map "\e[1;P50" (kbd "H-p"))
     (define-key map "\e[1;P51" (kbd "H-q"))
     (define-key map "\e[1;P52" (kbd "H-r"))
     (define-key map "\e[1;P53" (kbd "H-s"))
     (define-key map "\e[1;P54" (kbd "H-t"))
     (define-key map "\e[1;P55" (kbd "H-u"))
     (define-key map "\e[1;P56" (kbd "H-v"))
     (define-key map "\e[1;P57" (kbd "H-w"))
     (define-key map "\e[1;P58" (kbd "H-x"))
     (define-key map "\e[1;P59" (kbd "H-y"))
     (define-key map "\e[1;P60" (kbd "H-z"))
     (define-key map "\e[1;P70" (kbd "H-/"))
     (define-key map "\e[1;P71" (kbd "H-."))
     (define-key map "\e[1;P72" (kbd "H-,"))
     (define-key map "\e[1;P74" (kbd "H-SPC"))
     ))
