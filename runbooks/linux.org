#+TITLE: Linux

This is my runbook for Linux.  It contains Org-Mode tangle blocks.[fn:1]

* Guiding Principles

I have chosen to adopt Linux in an effort to step out of a walled garden; namely
MacOS.  I have been using MacOS as my personal and work operating system
since 2005.  In that time, I’ve watched as Apple has become more hostile to
folks using their computer outside the bounds of “Applications made by folks
that have paid Apple for the privilege of making Applications in MacOS.”

Some of this includes:

- Requiring XCode to build software
- Marking installed packages as “damaged” when they weren’t signed by Apple.

Further, Apple is rolling out “Artificial Intelligence” which means my
computering may well be used for training a Large Language Model (LLM).  As
such, I’m looking to step out of the walled garden.

I’m also looking at how I might use this experience to guide others.  This
“guide others” is in tension with my exploration of a a tiling window manager;
in that the managers I’m considering are a bit more obtuse compared to current
desktop interactions.

Running contrary to this, is the fact that for the foreseeable future, I’ll be
using MacOS for my work environment.  Which means I’m looking to maintain
degrees of similarity.

* Keyboard Bindings

Given that my work computer is a Mac and I'm shifting to Linux, I know
that I will bump up against keybinding differences.

I consider the most important key change to be mapping my =caps lock= key to =ctrl=.
All other things are negotiable.  I’m also considering whether I will remap even
more keys.

I do know that for my window manager, I want to explore mapping an under-used
key.

The computer I'm using has a firmware package for modifying keybindings; however
I'm opting for a more general approach.  That is one that doesn't need a
firmware package.  Which should be generally more applicable.

One significant difference, shifting from a Macbook keyboard and my new machine is that I now have a number pad along with several “good ol’ stand-by keys” such as Print Screen, Insert, Page Up/Down, Home, and End.

** Editing =/etc/default/keyboard=

As part of my initial effort to map =caps lock= to =ctrl=, I used the following:

- Open a Shell
- Switch to root (e.g. =su=)
- Edit =/etc/default/keyboard=
- Set ~XKBOPTIONS="ctrl:swapcaps"~
- Run =sudo dpkg-reconfigure keyboard-configuration=
- Restart the computer

This worked, but was more invasive than I wanted.  So I explored XModmap as an
alternative.

** XModmap

I am unclear about the interaction of XModmap and =/etc/default/keyboard=; as such
I removed the changes I made to the keyboard file and proceeded with these
steps.[fn:3]

I found [[https://gist.github.com/yemM/9f232e2483b67965e9a0d55158e02ab2][Xmodmap to get keyboard act as on Mac OS · GitHub]], which altered the
keyboard layout to similar expectations as MacOS.  However I'm going with a
slightly different configuration

#+begin_src text :tangle ~/.Xmodmap
  !!! NOTE: This file was generated by org-tangle from
  !!!       ~/git/dotzshrc/runbooks/linux.org

  ! As a matter of hygiene and cleanliness, clear the modifiers.  We will remap
  ! later.
  clear lock
  clear control
  clear mod1
  clear mod2
  clear mod3
  clear mod4
  clear mod5

  ! Bind left control as Hyper
  keycode 37 = Hyper_L

  !Bind caps lock as Control
  keycode 66 = Control_L

  !Bind insert as Hyper_R
  keycode 118 = Hyper_R

  add control = Control_L Control_R
  add mod1 = Alt_L Alt_R Meta_L
  add mod2 = Num_Lock
  add mod3 = Hyper_L
  add mod4 = Super_L Super_R
  ! Treat re-bound insert as mod5 in Terminal
  add mod5 = Hyper_R
#+end_src

On my present machine the bottom key labels are (from left to right) and with
the above configuration these bind accordingly:

- =ctrl= :: =C-=
- =fn= :: OS Function key toggle (e.g. =F1=)
- =super= :: =s-=
- =alt= :: =M-=
- =space= :: =SPC=
- =alt= :: =M-=
- =menu= :: =M-x= (kind of nice having a dedicated =M-x= key)
- =ctrl= :: =C-=

I also have an =Ins/Scr Lk= key that now binds as =H-= (hyper).  A major change that
I'm evaluating is whether the keys to the immediate right and left of =SPC= should
be =M-= or =s-=.  There is also the left-most =ctrl= that I might remap.

Regardless of my considerations, I use the following command to apply the above changes:

#+begin_src bash :results none
  xmodmap ~/.Xmodmap
#+end_src

I’ve attempted to add this keyboard configuration to my windowed session login;
however it is not yet working.

* Coping with Pop OS Keybindings

This was a bit of a side-quest, but one that relates to Emacs.  Namely Pop OS
uses a lot of =s-= keys for window operations.  My Emacs also uses =s-= keys, and I
wanted to avoid collision.

Out of the box, I’m using Pop OS.  I had considered Debian, but when I use a
live boot image, the trackpad does not work.  I’m not prepared to mess with
this.  So I’m sticking with the quite nice Pop OS (a derivative of Ubuntu, which
is a derivative of Debian).

There are a lot of OS-level keys bound to =s-= prefix.  I went through the menu to
disable most of those.

One non-Pop OS key was monitor switching.  It was bound to =s-p=, something I use extensively in Emacs.  I ran =gsettings set org.gnome.mutter.keybindings switch-monitor "[]"= to unbind =s-p= from the =switch-monitor= gnome command.

I'm also using =dconf dump / > ~/git/dotzshrc/pop_os_settings.conf= which I can
then use to load (via =dconf load < ~/git/dotzshrc/pop_os_settings.conf=).

What I noticed is that the =dconf dump= does not include the default keybindings,
but instead the changes.  To find those, I needed to dig just a bit further.

TODO: I referenced the Pop OS schema.

One at present unsolvable is that typing =s-= and releasing invokes Pop OS’s
launcher.  Given that I’d often used =s-Space= for MacOS to launch apps, I’m okay
enough with this behavior.

* Get Emacs Installed

That’s a lot of pre-amble for “Caps Lock sends Control character.”  Now, on to
getting the primary tool of my computering: Emacs.

I think my Emacs configuration requires at least version 29.1; however I’m
uncertain.  The package manager had Emacs 27 available, so I opted to build from
source.

I could either download a released version’s source code or clone the
repository.  I chose the clone route; as this would be useful as upgrades come
out.

Preliminaries:

- =sudo apt update=
- =sudo apt install git=

With =git= installed I need a copy of the Emacs repository, and should build from
a stable ref; as of <2025-04-23 Wed> that is =emacs-30.1=.[fn:6]

I used [[https://gist.github.com/zoliky/0445b20676bfa85450d7df006066ceb7][Installing Emacs 29.1 from source on Debian 12 · GitHub]] as my framing.

- =sudo apt build-dep emacs=
- =sudo apt install libtree-sitter-dev=
- =sudo apt install libgcc-12-dev libgccjit-12-dev=
- =mkdir ~/.local/emacs=

In my source directory for Emacs (e.g., =~/git/emacs/=), I ran the following:

#+begin_example bash
  ./configure \
  --prefix="$HOME/.local/emacs/" \
  --without-compress-install \
  --with-native-compilation=aot \
  --with-x \
  --with-x-toolkit=lucid \
  --with-gif \
  --with-png \
  --with-jpeg \
  --with-tiff \
  --with-imagemagick \
  --with-mailutils \
  --with-tree-sitter \
  CC=gcc-12
#+end_example

It took a few tries, which is why I have the ~CC=gcc-12~ declaration as well as
instructions for installing =libgcc-12-dev= and =libgccjit-12-dev=.

Now came time to spin up the fans.  I ran =make -j 16=; where 16 is the number of
cores on my machine.  And finally =make install=.

Along the way, I realized that there were terminal commands that I was missing.
But I could hobble along.

Up until I had Emacs built, I was using =nano= to write my notes.  It is quite
serviceable.

Note, I could have installed Emacs 30.1 via the Pop Shop, however I chose to
build from source.

** Grabbing Links

Part of my writing workflow is grabbing links from my browser (and RSS feed).
On MacOS I use [[https://github.com/xuchunyang/grab-mac-link.el][GitHub - xuchunyang/grab-mac-link.el: Grab link from Mac Apps and
insert it into Emacs]].  And I explored [[https://github.com/xuchunyang/grab-x-link][GitHub - xuchunyang/grab-x-link: Grab
links from some X11 apps and insert into Emacs]].

However, that wasn’t quite enough.  So I wrote up [[https://github.com/jeremyf/dotemacs/blob/943ba0640db5526d5946ec094ab7a4f2d32cfb9b/emacs.d/grab-x-link.el][some changes for my own needs]];
namely to address having multiple applications based on Firefox.  Along the way
I learned about =xdotool= and =comm=.

* Internet Hygiene

I installed my password manager, so I could quickly sign-in to paid services.  I
downloaded [[https://mullvad.net][Mullvad VPN]] and reviewed the base-line configuration.  Then set my
DNS following the [[https://mullvad.net/en/help/dns-over-https-and-dns-over-tls#linux][DNS Over HTTPs and DNS over TLS]] instruction.

With Firefox shifting from an advertising funded Browser company to an
advertising AI company that makes a browser, I’m wanting to separate from day to
day usage.

Thus I’ve added LibreWolf and Mullvad Browser to my every day browsing options.

For LibreWolf:

#+begin_example bash
sudo apt update && sudo apt install extrepo -y

sudo extrepo enable librewolf

sudo apt update && sudo apt install librewolf -y
#+end_example

For Mullvad Browser:

  #+begin_example bash
  sudo curl -fsSLo /usr/share/keyrings/mullvad-keyring.asc https://repository.mullvad.net/deb/mullvad-keyring.asc

  # Add the Mullvad repository server to apt
  echo "deb [signed-by=/usr/share/keyrings/mullvad-keyring.asc arch=$( dpkg --print-architecture )] https://repository.mullvad.net/deb/stable $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/mullvad.list

  # Install the package
  sudo apt update
  sudo apt install mullvad-browser
  # And to install the alpha version
  sudo apt install mullvad-browser-alpha
  #+end_example

* Terminal

In MacOS I’ve long used iTerm2, which is a terminal available only in MacOS.  I
have started using the Vterm package in Emacs, but still want a non-Emacs based option.

The built in terminal is adequate, but I’m thinking about using a cross-platform
terminal.  The top contenders are Alacritty and Kitty.  Normally I’d favor
Kitty, but my MacOS install of Kitty has some weird behavior.

For now I’m holding.

* Authentication with Github

I’ve long used SSH keys for Github.

I needed to again create a token and get the [[https://github.com/cli/cli/blob/trunk/docs/install_linux.md][Github CLI command tool]] working.  I
did some tweaking to the command paths.

* General Tasks

Installed [[https://ohmyz.sh/][Oh My Zsh]] then set =zsh= as default shell, via =csch -s $(which zsh)=.  On
MacOS I was using =~/.zprofile= for my shell configuration.  Needed to instead use
=~/.zshenv=.

Installed =fzf= via =sudo apt install fzf=.  Curious how to get completions and key-bindings working, I ran =apt info fzf= which pointed me to to the following:

#+begin_quote
Refer /usr/share/doc/fzf/README.Debian for quick instructions on how to add
keybindings for Bash, Zsh, Fish to call fzf.
#+end_quote

Installed =fd= via =sudo apt install fd-find=.  Followed instructions, creating a
symlink to fd (via =ln -sf $(which fdfind) ~/.local/bin/fd=).

Installed =xclip= and =xsel= to provide command line utilities for copying and
pasting into the system Clipboard.  (Similar to MacOS’s =pbcopy= and =pbpaste=).

* Keyboard Navigation

I’m accustomed to MacOS, in which many basic Emacs key navigations work.  I wanted to make that happen, I found [[https://blog.karssen.org/2024/06/05/using-emacs-key-bindings-in-gnome-firefox-and-other-applications/][Using Emacs Key bindings in Gnome, Firefox, and other Applications]].

I set =gsettings set org.gnome.desktop.interface gtk-key-theme 'Emacs'=.

* Menu Bar

I'm using the Pop OS flavor of Ubuntu; and wanted to enable the application Menu.  I ran the following:

=gsettings set org.gnome.shell.extensions.pop-cosmic show-application-menu true=

* Window Tiling

I’m curious about tiling window managers.  And seeing how I can introduce some
friction for changing contexts.[fn:4] I acknowledge that shifting from long-time
use of MacOS to Linux is likely already a major disruption, and layering on
changes to window management may be overwhelming.

But, I figure this is a good time to learn.  I settled on [[https://i3wm.org/][I3]] as my initial
tiling window manager.  [[https://i3wm.org/][I3]] is well-documented, was simple to install and get
running.[fn:5]

On my old Macbook and work laptop (both running MacOS), I installed [[https://github.com/nikitabobko/AeroSpace][AeroSpace]]
and am practicing that using a [[https://github.com/jeremyf/dotzshrc/blob/main/symlinks/dot.aerospace.toml][custom configuration]].  My hope is to have some
hotkey alignment on my work machine and personal machine(s).

During this exploration, I’ve considered the following tiling window managers:

- Exwm :: it runs within Emacs; but am hesitant to bind my tiling window manager
  to the single-threaded Emacs.
- XMonad :: it is built in Haskell; the installation process seemed a bit more
  arduous.
- Ratpoison :: a minimal, no dependency, window manager that seeks to minimize
  mouse usage.  This feels like “computering from a by-gone era.”
- StumpWM :: a Lisp reimagining of Ratpoison, with notable Emacs integration.

In each of the above cases, the adoption curve was higher.  I’m also considering
that as I adopt a tiling window manager, I’ll be learning new computering
approaches as I shift from MacOS to Linux.  So I figure, adopt something that is
simple to use.

During my exploration, I learned of some key functions:

- =update-alternatives= :: I can use this command to =--install= or =--remove= an
  option.

I appreciate that I have the ability to install the window manager package but
not install it as the active window manager.  And I can install multiple window
manager packages, but only activate one of them.

** On I3

A configurable and well-documented tiling window manager.  I performed the
following steps to get it running:

- =sudo apt install i3=
- =sudo update-alternatives --install /usr/bin/x-session-manager x-session-manager /usr/bin/i3 60=

To remove i3 as my window manager of choice I ran:

=sudo update-alternatves --remove x-session-manager /usr/bin/i3=

*** I3 Config

What follows is my [[https://i3wm.org/][I3]] config:

#+begin_src text :tangle ~/.config/i3/config
  # NOTE: This file was generated by org-tangle from
  #       ~/git/dotzshrc/runbooks/linux.org
  #
  # This file began its existence as the output of i3-config-wizard.  Since then
  # it has underwent modifications.
  #
  # Its present form is that of a an i3 config file (v4)
  #
  # Please see https://i3wm.org/docs/userguide.html for a complete reference!

  # I'm looking at mapping Mod5 to one of those "old-timey" keys that wasn't
  # available on a Mac (e.g. "print screen", "insert", etc.)
  #
  # This lets my Emacs keybindings remain untouched.
  set $mod Mod5

  # Emacs is the core of my computering.  The command, as written is not
  # adequate, but it is a good place-holder.
  exec --no-startu-id emacs ~/

  # Font for window titles. Will also be used by the bar unless a different font
  # is used in the bar {} block below.
  font pango:monospace 8

  # This font is widely installed, provides lots of unicode glyphs, right-to-left
  # text rendering and scalability on retina/hidpi displays (thanks to pango).
  #font pango:DejaVu Sans Mono 8

  # Start XDG autostart .desktop files using dex. See also
  # https://wiki.archlinux.org/index.php/XDG_Autostart
  exec --no-startup-id dex --autostart --environment i3
  
  # https://wiki.archlinux.org/index.php/XDG_Autostart
  exec --no-startup-id dex --autostart --environment i3

  # The combination of xss-lock, nm-applet and pactl is a popular choice, so
  # they are included here as an example. Modify as you see fit.

  # xss-lock grabs a logind suspend inhibit lock and will use i3lock to lock the
  # screen before suspend. Use loginctl lock-session to lock your screen.
  exec --no-startup-id xss-lock --transfer-sleep-lock -- i3lock --nofork

  # NetworkManager is the most popular way to manage wireless networks on Linux,
  # and nm-applet is a desktop environment-independent system tray GUI for it.
  exec --no-startup-id nm-applet

  # Use pactl to adjust volume in PulseAudio.
  set $refresh_i3status killall -SIGUSR1 i3status
  bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status
  bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% && $refresh_i3status
  bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
  bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status

  # Use Mouse+$mod to drag floating windows to their wanted position
  floating_modifier $mod

  # move tiling windows via drag & drop by left-clicking into the title bar,
  # or left-clicking anywhere into the window while holding the floating modifier.
  tiling_drag modifier titlebar

  # Kill and relaunch Emacs
  mode "exec" {
    bindsym e exec "edaemon; e ~/ -c"
    bindsym l exec "librewolf"
    bindsym m exec "mullvad"
    # bindsym v exec "vpn"
    bindsym t exec i3-sensible-terminal

    bindsym Return mode "default"
    bindsym Escape mode "default"
    bindsym $mod+x mode "default"
  }
  bindsym $mod+x mode "exec"

  # kill focused window
  bindsym $mod+Shift+q kill

  # start a program launcher
  # TODO: explore rofi https://wiki.archlinux.org/title/Rofi
  bindsym $mod+space exec --no-startup-id dmenu_run

  # A more modern dmenu replacement is rofi:
  # bindcode $mod+40 exec "rofi -modi drun,run -show drun"
  # There also is i3-dmenu-desktop which only displays applications shipping a
  # .desktop file. It is a wrapper around dmenu, so you need that installed.
  # bindcode $mod+40 exec --no-startup-id i3-dmenu-desktop

  mode "focus" {
    bindsym b focus left
    bindsym Left focus left

    bindsym n focus down
    bindsym Down focus down

    bindsym p focus up
    bindsym Up focus up

    bindsym f focus right
    bindsym Right focus right

    bindsym Return mode "default"
    bindsym Escape mode "default"
    bindsym $mod+f mode "default"
  }
  bindsym $mod+f mode "focus"

  mode "move" {
    bindsym b move left
    bindsym Left move left

    bindsym n move down
    bindsym Down move down

    bindsym p move up
    bindsym Up move up

    bindsym f move right
    bindsym Right move right

    bindsym Return mode "default"
    bindsym Escape mode "default"
    bindsym $mod+m mode "default"
  }
  bindsym $mod+m mode "move"

  mode "split" {
    bindsym h split h
    bindsym v split v

    bindsym Return mode "default"
    bindsym Escape mode "default"
    bindsym $mod+s mode "default"
  }
  bindsym $mod+s mode "split"

  mode "layout" {
    bindsym f fullscreen toggle
    bindsym s layout stacking
    bindsym w layout tabbed
    bindsym e layout toggle split

    bindsym Return mode "default"
    bindsym Escape mode "default"
    bindsym $mod+l mode "default"
  }
  bindsym $mod+l mode "layout"

  # toggle tiling / floating
  bindsym $mod+/ floating toggle

  # change focus between tiling / floating windows
  # bindsym $mod+shift+/ focus mode_toggle

  # focus the parent container
  #bindsym $mod+a focus parent

  # focus the child container
  #bindsym $mod+d focus child

  # Define names for default workspaces for which we configure key bindings later on.
  # We use variables to avoid repeating the names in multiple places.
  set $ws1 "1"
  set $ws2 "2"
  set $ws3 "3"
  set $ws4 "4"
  set $ws5 "5"
  set $ws6 "6"
  set $ws7 "7"
  set $ws8 "8"
  set $ws9 "9"
  set $ws10 "10"

  # switch to workspace
  bindsym $mod+1 workspace number $ws1
  bindsym $mod+2 workspace number $ws2
  bindsym $mod+3 workspace number $ws3
  bindsym $mod+4 workspace number $ws4
  bindsym $mod+5 workspace number $ws5
  bindsym $mod+6 workspace number $ws6
  bindsym $mod+7 workspace number $ws7
  bindsym $mod+8 workspace number $ws8
  bindsym $mod+9 workspace number $ws9
  bindsym $mod+0 workspace number $ws10

  # move focused container to workspace
  bindsym $mod+Shift+1 move container to workspace number $ws1
  bindsym $mod+Shift+2 move container to workspace number $ws2
  bindsym $mod+Shift+3 move container to workspace number $ws3
  bindsym $mod+Shift+4 move container to workspace number $ws4
  bindsym $mod+Shift+5 move container to workspace number $ws5
  bindsym $mod+Shift+6 move container to workspace number $ws6
  bindsym $mod+Shift+7 move container to workspace number $ws7
  bindsym $mod+Shift+8 move container to workspace number $ws8
  bindsym $mod+Shift+9 move container to workspace number $ws9
  bindsym $mod+Shift+0 move container to workspace number $ws10

  # reload the configuration file
  bindsym $mod+Shift+c reload
  # restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
  bindsym $mod+Shift+r restart
  # exit i3 (logs you out of your X session)
  bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"

  # resize window (you can also use the mouse for that)
  mode "resize" {
    # These bindings trigger as soon as you enter the resize mode

    # Pressing left will shrink the window’s width.
    # Pressing right will grow the window’s width.
    # Pressing up will shrink the window’s height.
    # Pressing down will grow the window’s height.
    bindsym j resize shrink width 10 px or 10 ppt
    bindsym k resize grow height 10 px or 10 ppt
    bindsym l resize shrink height 10 px or 10 ppt
    bindsym semicolon resize grow width 10 px or 10 ppt

    # same bindings, but for the arrow keys
    bindsym Left resize shrink width 10 px or 10 ppt
    bindsym Down resize grow height 10 px or 10 ppt
    bindsym Up resize shrink height 10 px or 10 ppt
    bindsym Right resize grow width 10 px or 10 ppt

    # back to normal: Enter or Escape or $mod+r
    bindsym Return mode "default"
    bindsym Escape mode "default"
    bindsym $mod+r mode "default"
  }

  bindsym $mod+r mode "resize"

  # Start i3bar to display a workspace bar (plus the system information i3status
  # finds out, if available)
  bar {
  status_command i3status --config ~/.config/i3/i3status.conf
  }

#+end_src

*** I3 Status Config

I found the default I3 status bar to be very chatty.  I stripped that down for
less chatter.

#+begin_src text :tangle ~/.config/i3/i3status.conf
  # NOTE: This file was generated by org-tangle from
  #       ~/git/dotzshrc/runbooks/linux.org
  general {
     colors = true
     interval = 5
  }

  order += "wireless wlan0"
  order += "disk /"
  order += "tztime local"
  order += "battery 0"
  order += "load"

  tztime local {
    format = "%Y-%m-%d %H:%M"
  }

  battery 0 {
    format = "%status %percentage %remaining %emptytime"
    format_down = "No battery"
    status_chr = "⚡ CHR"
    status_bat = "🔋 BAT"
    status_unk = "? UNK"
    status_full = "☻ FULL"
    path = "/sys/class/power_supply/BAT%d/uevent"
    low_threshold = 10
  }

  load {
    format = "%5min"
  }

  disk "/" {
    format = "%free"
  }
#+end_src

*** Considerations

I’m accustomed to a “system tray” in MacOS that includes actionable icons:

- VPN, which shows both status as well as allows for “clicking” to change.
- ProtonBridge, which shows the status of whether its running (and thus I can
  pull email from the server).
- Bluetooth indicator
- Logout button

I’m unclear how those icons might behave, or how I might assemble that using I3.

* TODO Outstanding Tasks [16%]

In this section I outline and detail the steps I consider for a complete
migration.

** TODO Bring Denote Files Over

** TODO Read and Compose Emails in Emacs

** TODO Elfeed Running with past DB

** DONE Emacs Everywhere
CLOSED: [2025-04-29 Tue 08:24]
:LOGBOOK:
- State "DONE"       from "TODO"       [2025-04-29 Tue 08:24]
:END:

I use the [[https://github.com/tecosaur/emacs-everywhere][Emacs Everywhere package]].  On MacOS I rely on [[https://www.hammerspoon.org/][Hammerspoon]] tool for
launching into Emacs.

As I’m running Pop OS, I followed the [[https://help.ubuntu.com/stable/ubuntu-help/keyboard-shortcuts-set.html.en][Ubuntu instructions for binding a custom
shortcut]].

** TODO Get Syncthing Running

** TODO Publish Blog Post

This requires setting up my build engine.

* Footnotes
[fn:6] I had a copy of the Emacs git repository on another machine.  So I used the
sneaker net (e.g. a thumbdrive) to copy that over to the Linux machine and then
run =git pull= so I could get up to date source code.

[fn:1] Run =M-x org-babel-tangle= to perform the updates.

[fn:2] A consumer-grade older HP laptop.

[fn:3] An advantage is that the XModmap modifications, as implemented, are on a
per-user basis.

[fn:4] I’ve noticed that when I use =Cmd+Tab= to jump between applications I am just
a bit more prone to accept a distraction.  Also that I’m using this as some sort
of reflex to seek distraction.

[fn:5] [[https://i3wm.org/][I3]] was also the documentation that detailed =update-alternatives=; which
equipped me to further explore.
