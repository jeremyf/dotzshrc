#+TITLE: Linux

This is my runbook for Linux.  It contains Org-Mode tangle blocks.[fn:1] My goal is
that once I have Emacs installed, I can “execute” this document to perform many
of the updates.

* Guiding Principles

I have chosen to adopt Linux in an effort to step out of a walled garden; namely
MacOS.  I have been using MacOS as my personal and work operating system
since 2005.  In that time, I’ve watched as Apple has become more hostile to
folks using their computer outside the bounds of “Applications made by folks
that have paid Apple for the privilege of making Applications in MacOS.”

Some of this includes:

- Requiring XCode to build software
- Marking installed packages as “damaged” when they weren’t signed by Apple.

Further, Apple is rolling out “Artificial Intelligence” which means my
computering may well be used for training a Large Language Model (LLM).  As
such, I’m looking to step out of the walled garden.

I’m also looking at how I might use this experience to guide others.  This
“guide others” is in tension with my exploration of a a tiling window manager;
in that the managers I’m considering are a bit more obtuse compared to current
desktop interactions.

Running contrary to this, is that for the foreseeable future I’ll be using MacOS
for my work environment.  Which means I’m looking to maintain degrees of
similarity.

* Keyboard Bindings

Given that my work computer is a Mac and I'm shifting to Linux, I know
that I will bump up against keybinding differences.

I consider the most important key change to be mapping my =caps lock= key to =ctrl=.
All other things are negotiable.  I’m also considering whether I will remap even
more keys.

I do know that for my window manager, I want to explore mapping an under-used
key.

The computer I'm using has a firmware package for modifying keybindings; however
I'm opting for a more general approach.  That is one that doesn't need a
firmware package.  Which should be generally more applicable.

One significant difference, shifting from a Macbook keyboard and my new machine
is that I now have a number pad along with several “good ol’ stand-by keys” such
as Print Screen, Insert, Page Up/Down, Home, and End.

** Editing =/etc/default/keyboard=

As part of my initial effort to map =caps lock= to =ctrl=, I used the following:

- Open a Shell
- Switch to root (e.g. =su=)
- Edit =/etc/default/keyboard=
- Set ~XKBOPTIONS="ctrl:swapcaps"~
- Run =sudo dpkg-reconfigure keyboard-configuration=
- Restart the computer

This worked, but was more invasive than I wanted.  So I explored XModmap as an
alternative.

** XModmap

I am unclear about the interaction of XModmap and =/etc/default/keyboard=; as such
I removed the changes I made to the keyboard file and proceeded with these
steps.[fn:2]

I found [[https://gist.github.com/yemM/9f232e2483b67965e9a0d55158e02ab2][Xmodmap to get keyboard act as on Mac OS · GitHub]], which altered the
keyboard layout to similar expectations as MacOS.  However I'm going with a
slightly different configuration

#+begin_src text :tangle ~/.Xmodmap
  !!! NOTE: This file was generated by org-tangle from
  !!!       ~/git/dotzshrc/runbooks/linux.org

  ! As a matter of hygiene and cleanliness, clear the modifiers.  We will remap
  ! later.
  clear lock
  clear control
  clear mod1
  clear mod2
  clear mod3
  clear mod4
  clear mod5

  ! Bind left control as Hyper
  keycode 37 = Hyper_L

  !Bind caps lock as Control
  keycode 66 = Control_L

  !Bind insert as Hyper_R
  !keycode 118 = Hyper_R

  add control = Control_L Control_R
  add mod1 = Alt_L Alt_R Meta_L
  add mod2 = Num_Lock
  add mod3 = Hyper_L
  add mod4 = Super_L Super_R
  ! Treat re-bound insert as mod5 in Terminal
  ! add mod5 = Hyper_R
#+end_src

On my present machine the bottom key labels are (from left to right) and with
the above configuration these bind accordingly:

- =ctrl= :: =C-=
- =fn= :: OS Function key toggle (e.g. =F1=)
- =super= :: =s-=
- =alt= :: =M-=
- =space= :: =SPC=
- =alt= :: =M-=
- =menu= :: =M-x= (kind of nice having a dedicated =M-x= key)
- =ctrl= :: =C-=

In my initial foray, I bound =Insert/Screen Lock= key to =H-= (hyper).  A major
change that I'm evaluating is whether the keys to the immediate right and left
of =SPC= should be =M-= or =s-=.  There is also the left-most =ctrl= that I might remap.

However, this binding conflicted with later developments, so I preserved =Insert=
as its original behavior.

Regardless of my considerations, I use the following command to apply the above
changes:

#+begin_src bash :results none
  xmodmap ~/.Xmodmap
#+end_src

I’ve attempted to add this keyboard configuration to my windowed session login;
however it is not yet working.  As such, whenever I boot my computer and login,
it behooves me to launch a terminal.

** Investigating the Boot

I found [[https://unix.stackexchange.com/questions/42611/how-can-i-run-a-script-that-starts-before-my-login-screen][How can I run a script that starts before my login screen?]] on Stack
Exchange.  This looked promising.

I looked into my =/etc/gdm3/Init/= and there was one file: =Default=.  This was a
bash script.  Reading the code it was looking for an Xmodmap file in some system
directories.  One was =/usr/etc/X11/Xmodmap=.

I tried using both a symlink and a copy of my personal =~/.Xmodmap= to the =/usr/etc/X11/Xmodmap= file, but it did not run this before the window manager, so I’ve set it aside.

Until I learn more, I’ll launch Terminal when I first login.

* Coping with Pop OS Keybindings

This was a bit of a side-quest, but one that relates to Emacs.  Namely Pop OS
uses a lot of =s-= keys for window operations.  My Emacs also uses =s-= keys, and I
wanted to avoid collision.

Out of the box, I’m using Pop OS.  I had considered Debian, but when I use a
live boot image, the trackpad does not work.  I’m not prepared to mess with
this.  So I’m sticking with the quite nice Pop OS (a derivative of Ubuntu, which
is a derivative of Debian).

There are a lot of OS-level keys bound to =s-= prefix.  I went through the menu to
disable most of those.

One non-Pop OS key was monitor switching.  It was bound to =s-p=, something I use
extensively in Emacs.  I ran =gsettings set org.gnome.mutter.keybindings
switch-monitor "[]"= to unbind =s-p= from the =switch-monitor= gnome command.

I'm also using =dconf dump / > ~/git/dotzshrc/pop_os_settings.conf= which I can
then use to load, via the following:

#+begin_src shell :dir "/home/jfriesen" :cache no :export source :results raw silent
  dconf load / < ~/git/dotzshrc/pop_os_settings.conf
#+end_src

What I noticed is that the =dconf dump= does not include the default keybindings,
but instead the changes.  To find those, I needed to dig just a bit further.

I forget where I originally learned of =dconf= but I found the following helpful: [[https://linuxconfig.org/introduction-to-the-dconf-configuration-system][Introduction to the dconf configuration system]].

TODO: I referenced the Pop OS schema.

One at present unsolvable “issue” is that typing =s-= (e.g., =super=) and releasing
invokes Pop OS’s launcher.  Given that I’d often used =s-Space= for MacOS to
launch apps, I’m okay enough with this behavior.

And as I’ve been working on Linux, to build this document, I opted to switch the
bindings on my Macbook.  Now I have mapped the key to the left of the space bar
on my Macbook maps to Option/Alt.  I figure, if I’m going to leave the wall
garden perhaps I can also leave the muscle memory and rebuild anew.[fn:3]

* Get Emacs Installed

That’s a lot of pre-amble for “Caps Lock sends Control character.”  Now, on to
getting the primary tool of my computering: Emacs.

I think my Emacs configuration requires at least version 29.1; however I’m
uncertain.  The package manager had Emacs 27 available, so I opted to build from
source.

I could either download a released version’s source code or clone the
repository.  I chose the clone route; as this would be useful as upgrades come
out.

Preliminaries:

#+begin_src shell :dir "/sudo::/" :cache no :export source :results raw silent
  sudo apt update && sudo apt install git --assume-yes
#+end_src

With =git= installed I need a copy of the Emacs repository, and should build from
a stable ref; as of <2025-04-23 Wed> that is =emacs-30.1=.[fn:4]

I used [[https://gist.github.com/zoliky/0445b20676bfa85450d7df006066ceb7][Installing Emacs 29.1 from source on Debian 12 · GitHub]] as my framing.

First, building the dependencies:

#+begin_src shell :dir "/sudo::/" :cache no :export source :results raw silent
  sudo apt build-dep emacs
  sudo apt install libtree-sitter-dev libgcc-12-dev libgccjit-12-dev
#+end_src

Then making a home for my new install:

#+begin_src shell :dir "~/" :cache no :export source :results raw silent
  mkdir -p ~/.local/emacs
#+end_src

In my source directory for Emacs (e.g., =~/git/emacs/=), I ran the following:

#+begin_example bash
  ./configure \
  --prefix="$HOME/.local/emacs/" \
  --without-compress-install \
  --with-native-compilation=aot \
  --with-x \
  --with-x-toolkit=lucid \
  --with-gif \
  --with-png \
  --with-jpeg \
  --with-tiff \
  --with-imagemagick \
  --with-mailutils \
  --with-tree-sitter \
  CC=gcc-12
#+end_example

It took a few tries, which is why I have the ~CC=gcc-12~ declaration as well as
instructions for installing =libgcc-12-dev= and =libgccjit-12-dev=.

Now came time to spin up the fans.  I ran =make -j 16=; where 16 is the number of
cores on my machine.  And finally =make install=.

Along the way, I realized that there were terminal commands that I was missing.
But I could hobble along.

Up until I had Emacs built, I was using =nano= to write my notes.  It is quite
serviceable.

Note, I could have installed Emacs 30.1 via the Pop Shop, however I chose to
build from source.

** Toggling Gnome Settings

There are a few settings that I have found useful to toggle:

- [[*Trackpad and Night Light][Trackpad and Night Light]]
- [[*Light/Dark Theme][Light/Dark Theme]]
- [[*Radios][Radios]]

*** Trackpad and Night Light

With my new laptop and how I hold my hands, I’ve noticed that sometimes I
activate my trackpad.  Which is annoying, especially when I’m in a “writing
mindset.”

I don’t like the bright blues of a normal screen.  Instead I prefer to use a
display setting that softens the colors.  In MacOS this is “Night Shift.”

I choose a much warmer color, knowing that reds are softer on the retina.[fn:5]

Both of these settings are similar in how they are toggled.  So I wrote some
[[*Emacs Commands for Setting Toggling][Emacs Commands for Setting Toggling]].

**** DONE Emacs Commands for Setting Toggling

With the toggles identified, I set about writing the functions and macros to
help with future needs.

To create [[https://github.com/jeremyf/dotemacs/blob/f69f6c5f8058abc133cbd9d6970d96329e5128af/emacs.d/init.el#L358-L362][my Trackpad toggling command]] I call my [[https://github.com/jeremyf/dotemacs/blob/f69f6c5f8058abc133cbd9d6970d96329e5128af/emacs.d/init.el#L336-L356][jf/linux:gsettings-toggler
Emacs macro]].  Below is the code:

#+BEGIN_SRC emacs-lisp
  (jf/linux:gsettings-toggler "Trackpad"
    :property "org.gnome.desktop.peripherals.touchpad send-events"
    :match "'enabled'"
    :on_match "disabled"
    :on_miss "enabled")

#+END_SRC

The first parameter is the named concept (e.g., “Trackpad”).  The =:property= is
the =gsettings= key that I’m looking to change
(e.g. “org.gnome.desktop.peripherals.touchpad send-events”).  The =:match= value
is what I check as the property’s current state.  When the current value is a
match, I set the property to the =:on_match= value.

And below is [[https://github.com/jeremyf/dotemacs/blob/f69f6c5f8058abc133cbd9d6970d96329e5128af/emacs.d/init.el#L364-L368][how I generate my Night Light toggling command]]:

#+BEGIN_SRC emacs-lisp
(jf/linux:gsettings-toggler "Night Light"
    :property "org.gnome.settings-daemon.plugins.color night-light-enabled"
    :match "true"
    :on_match "false"
    :on_miss "true")
#+END_SRC

As of <2025-05-03 Sat> the generating macro is as follows:

#+BEGIN_SRC emacs-lisp
(cl-defmacro jf/linux:gsettings-toggler (name &key property match on_match on_miss)
    "Toggle the NAME setting via the PROPERTY.

When the PROPERTY is a MATCH set the property to ON_MATCH; otherwise set
it to the ON_MISS value."
    (let ((docstring
            (concat "Toggle " name " for Gnome desktop."))
           (func-name
             (intern (concat "jf/linux:toggle-" name))))
      `(defun ,func-name ()
         ,docstring
         (interactive)
         (let ((value
                 (if (string= ,match
                       (s-trim
                         (shell-command-to-string
                           (concat "gsettings get " ,property))))
                   ,on_match ,on_miss)))
           (shell-command
             (concat "gsettings set " ,property " " value))
           (message "%s: %s" ,name value)))))
#+END_SRC

*** Light/Dark Theme

Related but different from the Night Light concept is the Light and Dark
theming.  In Emacs I had a script to toggle the theme of both the OS and Emacs
(e.g. my =jf/dark= function).  I wanted something similar in Linux.

Yet, as I explored the changes, I realized that there would be a divergence in
implementation based on MacOS or Linux.

Toggling the light and dark theme is a bit different; as this requires
coordination.  [[https://github.com/jeremyf/dotemacs/blob/f69f6c5f8058abc133cbd9d6970d96329e5128af/emacs.d/init.el#L2943-L2958][My jf/color-scheme-system-toggle command]] handles both the MacOS
and my Linux install.

#+BEGIN_SRC emacs-lisp
(defun jf/color-scheme-system-toggle ()
    "Toggle system-wide Dark or Light setting."
    (interactive)
    (pcase system-type
      ('darwin
        (progn
          (shell-command
            (concat "osascript -e 'tell application \"System Events\" "
              "to tell appearance preferences "
              "to set dark mode to not dark mode'"))
          (jf/color-scheme-set-for-emacs)))
      (_
        (let ((lightp
                (eq :dark (jf/current-color-scheme-gnome))))
          (dolist (fn jf/color-scheme-system-toggle-functions)
            (funcall fn lightp))))))
#+END_SRC

The Linux toggling portion determines if the scheme is =:dark=, and uses that
boolean value to pass to each of the toggling functions.

[[https://github.com/jeremyf/dotemacs/blob/f69f6c5f8058abc133cbd9d6970d96329e5128af/emacs.d/init.el#L2901-L2910][My jf/color-scheme-system-toggle-functions variable]] (which I realized is
misnamed) defines a list of functions that I’ll call, passing =true= when I want
to set them to the “light” theme.  Below is that variable’s definition:

#+BEGIN_SRC emacs-lisp
(defvar jf/color-scheme-system-toggle-functions
    '(jf/color-scheme:gnome-color-scheme
       jf/color-scheme:gnome-gtk-theme
       jf/color-scheme:copyq-theme
       jf/color-scheme:emacs-theme)
    "A list of arity one functions that set component schemes based on the
input parameter.

When the parameter is non-nil, favor the dark option.  Otherwise favor
the light option.")
#+END_SRC

The four functions that toggle my system scheme are similar but just different
enough:

- [[https://github.com/jeremyf/dotemacs/blob/f69f6c5f8058abc133cbd9d6970d96329e5128af/emacs.d/init.el#L2912-L2917][jf/color-scheme:gnome-color-scheme]]
- [[https://github.com/jeremyf/dotemacs/blob/f69f6c5f8058abc133cbd9d6970d96329e5128af/emacs.d/init.el#L2919-L2926][jf/color-scheme:gnome-gtk-theme]]
- [[https://github.com/jeremyf/dotemacs/blob/f69f6c5f8058abc133cbd9d6970d96329e5128af/emacs.d/init.el#L2928-L2935][jf/color-scheme:copyq-theme]]
- [[https://github.com/jeremyf/dotemacs/blob/f69f6c5f8058abc133cbd9d6970d96329e5128af/emacs.d/init.el#L2937-L2941][jf/color-scheme:emacs-theme]]

Below is the definition of those four functions:

#+BEGIN_SRC emacs-lisp
  (defun jf/color-scheme:gnome-color-scheme (lightp)
    "Set the gnome color scheme based on LIGHTP (e.g. light/dark)."
    (shell-command
     (format
      "gsettings set org.gnome.desktop.interface color-scheme prefer-%s"
      (if lightp "light" "dark"))))

  (defun  jf/color-scheme:gnome-gtk-theme (lightp)
    "Set the gnome gtk theme based on LIGHTP (e.g. light/dark)."
    (let ((theme
           (if lightp "Adwaita" "Adwaita-dark")))
      (shell-command
       (format
        "gsettings set org.gnome.desktop.interface gtk-theme %s"
        theme))))

  (defun jf/color-scheme:copyq-theme (lightp)
    "Set the copyq theme based on LIGHTP (e.g. light/dark)."
    (shell-command
     (format
      "copyq loadTheme %s/solarized-%s.ini"
      (s-trim
       (shell-command-to-string "copyq info themes"))
      (if lightp "light" "dark"))))

  (defun jf/color-scheme:emacs-theme (lightp)
    "Set the emacs theme based on LIGHTP (e.g. light/dark)."
    (ef-themes-select
     (plist-get jf/themes-plist
                (if lightp :light :dark))))
#+END_SRC

An astute reader might notice some duplication of my
=jf/color-scheme:gnome-color-scheme= and =jf/color-scheme:gnome-gtk-theme= and the
toggling macro.  There’s a potential refactoring there, but I’m going to leave
it on the idea shelf.

*** Radios

By default, I like to keep my Bluetooth off.  I wanted a way to turn this off
and on via Emacs.  And also turn off and on my WiFi.

Below are [[https://github.com/jeremyf/dotemacs/blob/f69f6c5f8058abc133cbd9d6970d96329e5128af/emacs.d/init.el#L370-L391][my functions to go radio silent and start broadcasting]]:

#+BEGIN_SRC emacs-lisp
(defun jf/linux:radio-silence ()
    "Soft block laptop radios (e.g. bluetooth and wlan).

Related to `jf/linux:radio-broadcast'."
    (interactive)
    (shell-command "rfkill block all"))

  (defun jf/linux:radio-broadcast (&optional all identifiers)
    "Soft unblock laptop radios (e.g. bluetooth and wlan)

When ALL is non-nil unblock all radios.  Other unblock only the wlan.

Related to `jf/linux:radio-silence'."
    (interactive "P")
    (let ((identifiers
            (mapconcat
              (lambda (el) el)
              (or identifiers '("wlan"))
              " ")))
      (shell-command
        (concat "rfkill unblock "
          (if all "all" identifiers)))))

#+END_SRC

I don’t have a physical switch, so I settle for the soft programmatic block.

** Grabbing Links

Part of my writing workflow is grabbing links from my browser (and RSS feed).
On MacOS I use [[https://github.com/xuchunyang/grab-mac-link.el][GitHub - xuchunyang/grab-mac-link.el: Grab link from Mac Apps and
insert it into Emacs]].  And I explored [[https://github.com/xuchunyang/grab-x-link][GitHub - xuchunyang/grab-x-link: Grab
links from some X11 apps and insert into Emacs]].

However, that wasn’t quite enough.  So I wrote up [[https://github.com/jeremyf/dotemacs/blob/943ba0640db5526d5946ec094ab7a4f2d32cfb9b/emacs.d/grab-x-link.el][some changes for my own needs]];
namely to address having multiple applications based on Firefox.  Along the way
I learned about =xdotool= and =comm=.

* Internet Hygiene

I installed my password manager, so I could quickly sign-in to paid services.  I
downloaded [[https://mullvad.net][Mullvad VPN]] and reviewed the base-line configuration.  Then set my
DNS following the [[https://mullvad.net/en/help/dns-over-https-and-dns-over-tls#linux][DNS Over HTTPs and DNS over TLS]] instruction.

With Firefox shifting from an advertising funded Browser company to an
advertising AI company that makes a browser, I’m wanting to separate from day to
day usage.

Finding useful the [[https://github.com/mullvad/mullvad-browser/issues/1][Github Issue “What differentiates Mullvad Browser from, for
instance, arkenfox's user.js or Librewolf?”]], I have chosen to install both.

For LibreWolf:

#+begin_src shell :dir "/sudo::/home/jfriesen" :cache no :export source :results raw silent
  sudo apt update && sudo apt install extrepo  --assume-yes

  sudo extrepo enable librewolf

  sudo apt update && sudo apt install librewolf --assume-yes
#+end_src

For Mullvad Browser:

#+begin_src shell :dir "/sudo::/home/jfriesen" :cache no :export source :results raw silent
  sudo curl -fsSLo /usr/share/keyrings/mullvad-keyring.asc https://repository.mullvad.net/deb/mullvad-keyring.asc

  # Add the Mullvad repository server to apt
  echo "deb [signed-by=/usr/share/keyrings/mullvad-keyring.asc arch=$( dpkg --print-architecture )] https://repository.mullvad.net/deb/stable $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/mullvad.list

  # Install the package
  sudo apt update
  sudo apt install mullvad-browser --assume-yes
#+end_src

* Terminal

In MacOS I’ve long used iTerm2, which is a terminal available only in MacOS.  I
have started using the Vterm package in Emacs, but still want a non-Emacs based
option.

The built in terminal is adequate, but I’m thinking about using a cross-platform
terminal.  The top contenders are Alacritty and Kitty.  Normally I’d favor
Kitty, but my MacOS install of Kitty has some weird behavior.

For now I’m holding.

* Authentication with Github

I’ve long used SSH keys for Github.  I needed to again create a token and get
the [[https://github.com/cli/cli/blob/trunk/docs/install_linux.md][Github CLI command tool]] working.  I did some tweaking to the command paths.

I also have code on other Git forges; so I’ll want to consider that.

* General Tasks

Installed [[https://ohmyz.sh/][Oh My Zsh]] then set =zsh= as default shell via the following:

#+begin_src shell :dir "/home/jfriesen/" :cache no :export source :results raw silent
  chsh -s $(which zsh)
#+end_src

On MacOS I was using =~/.zprofile= for my shell configuration.  I needed to instead
use =~/.zshenv=.

** FZF

I leverage =fzf= for my reverse history search in my shell (e.g. =ctrl= + =r=), so I
installed it via the following:

#+begin_src shell :dir "/sudo::/home/jfriesen/" :cache no :export source :results raw silent
  sudo apt install fzf --assume-yes
#+end_src

Curious how to get completions and key-bindings working, I ran =apt info fzf=
which pointed me to to the following:

#+begin_quote
Refer /usr/share/doc/fzf/README.Debian for quick instructions on how to add
keybindings for Bash, Zsh, Fish to call fzf.
#+end_quote

** FD
I leverage =fd= as a =find= alternative, I ran: =sudo apt install fd-find
--assume-yes=.  However, for the Consult package this version was inadequate.

So I downloaded a more recent [[https://github.com/sharkdp/fd/releases][release of fd]] and ran the following:

#+begin_example
  sudo dpkg --force all -i ~/Downloads/fd-musl_10.2.0_amd64.deb
#+end_example

Then following instructions, I created the symlink as follows:

#+begin_src shell :dir "/home/jfriesen/" :cache no :export source :results raw silent
  ln -sf $(which fdfind) ~/.local/bin/fd
#+end_src

However, this created problems later; in that I had clobbered the underlying
=v8.3.1=; which broke other =apt install= commands.

So I undid the install, making sure to then run =sudo apt install fd-find
--reinstall=.  I returned to the release page for
[[https://github.com/sharkdp/fd/releases][release of fd]] and downloaded the tar
for my architecture (=x86_64-unknown-linux-gnu=) and set about installing the
binary:

#+begin_src shell :dir "~/" :cache no :export source :results raw silent
  mkdir -p ~/.local/bin
  rm -f ~/.local/bin/fd
  cp -f ~/Downloads/fd-v10.2.0-x86_64-unknown-linux-gnu/fd ~/.local/bin/fd
#+end_src

And then the =man= page:

#+begin_src shell :dir "/sudo::/home/jfriesen/" :cache no :export source :results raw silent
  sudo mkdir -p /usr/local/share/man/man1/

  sudo cp Downloads/fd-v10.2.0-x86_64-unknown-linux-gnu/fd.1 /usr/local/share/man/man1/

  sudo mandb
#+end_src

** XClip and XSel

In MacOS I regularly use =pbcopy= and =pbpaste=.  Both =xclip= and =xsel= apparently
provide similar behavior.  I opted to install both via the following:

#+begin_src shell :dir "/sudo::/home/jfriesen/" :cache no :export source :results raw silent
  sudo apt install xclip xsel --assume-yes
#+end_src

* Keyboard Navigation

I’m accustomed to MacOS, in which many basic Emacs key navigations work.  I
wanted to make that happen, I found [[https://blog.karssen.org/2024/06/05/using-emacs-key-bindings-in-gnome-firefox-and-other-applications/][Using Emacs Key bindings in Gnome, Firefox,
and other Applications]].

I ran the following:

#+begin_src shell :cache no :export source :results raw silent
  gsettings set org.gnome.desktop.interface gtk-key-theme 'Emacs'
#+end_src

This helps, but I’d still love for =C-n= to send =Down= when typed in non-Emacs;
this is something that I used Karabiner Elements to enforce/provide.

** TODO Exploring Conditional Keymappings

One function I miss from [[denote:20230201T203022][Karabiner-Elements]] is the ability to map a key combination for applications that match (or don’t match) a regular expression.

As mentioned earlier, I would love for =C-n= to send the =Down= key when I’m not in Emacs.  So I explored options by reviewing [[https://alternativeto.net/software/karabiner-elements/?platform=linux][Karabiner Elements Alternatives for Linux: Top 10 Key Mapping Tools]].

Ideally, the key mapper would be cross-platform so I could install on MacOS and
Linux.  A quick read through the various options and [[https://github.com/joshgoebel/keyszer][joshgoebel/keyszer: a smart, flexible keymapper for X11 (on Github)]] appears to meet my criteria.

* Menu Bar

I'm using the Pop OS flavor of Ubuntu; and wanted to enable the application
Menu.  I ran the following:

#+begin_src shell :cache no :export source :results raw silent
  gsettings set org.gnome.shell.extensions.pop-cosmic show-application-menu true
#+end_src

This adds the basic application window to the top tray.  Which now has on its
left side three items:

- Workspaces :: clicking provides a graphical overview of what application is
  running in what workspace.  (/Note to self:/ assuming I keep using the Pop OS
  window manager, investigate how to activate that preview with a keyboard
  shortcut).
- Applications :: clicking on this shows a launch pan, where I can type and
  filter applications to run.
- Current Application :: as I’m typing this, it says Emacs.  When I switch to a
  different application, it changes.

* Window Tiling

I’m curious about tiling window managers.  And seeing how I can introduce some
friction for changing contexts.[fn:6] I acknowledge that shifting from long-time
use of MacOS to Linux is likely already a major disruption, and layering on
changes to window management may be overwhelming.

But, I figure this is a good time to learn.  I settled on [[https://i3wm.org/][I3]] as my initial
tiling window manager.  [[https://i3wm.org/][I3]] is well-documented, was simple to install and get
running.[fn:7]

On my old Macbook and work laptop (both running MacOS), I installed [[https://github.com/nikitabobko/AeroSpace][AeroSpace]]
and am practicing that using a [[https://github.com/jeremyf/dotzshrc/blob/main/symlinks/dot.aerospace.toml][custom configuration]].  My hope is to have some
hotkey alignment on my work machine and personal machine(s).

During this exploration, I’ve considered the following tiling window managers:

- Exwm :: it runs within Emacs; but am hesitant to bind my tiling window manager
  to the single-threaded Emacs.
- XMonad :: it is built in Haskell; the installation process seemed a bit more
  arduous.
- Ratpoison :: a minimal, no dependency, window manager that seeks to minimize
  mouse usage.  This feels like “computering from a by-gone era.”
- StumpWM :: a Lisp reimagining of Ratpoison, with notable Emacs integration.

In each of the above cases, the adoption curve was higher.  I’m also considering
that as I adopt a tiling window manager, I’ll be learning new computering
approaches as I shift from MacOS to Linux.  So I figure, adopt something that is
simple to use.

During my exploration, I learned of some key functions:

- =update-alternatives= :: I can use this command to =--install= or =--remove= an
  option.

I appreciate that I have the ability to install the window manager package but
not install it as the active window manager.  And I can install multiple window
manager packages, but only activate one of them.

* TODO Outstanding Tasks [90%]

In this section I outline and detail the steps I consider for a complete
migration.


** DONE Hardening

Enable automatic security updates:

#+begin_src shell :dir "/sudo::/home/jfriesen" :cache no :export source :results raw silent
  sudo dpkg-reconfigure -p low unattended-upgrades
#+end_src

Disable some services, first run ~sudo systemctl list-unit-files --state=enabled~
to assess what services are running.

Below is an example of one of those:

#+begin_src shell :dir "/sudo::/home/jfriesen" :cache no :export source :results raw silent
  sudo systemctl disable cups.service
#+end_src
** DONE Firewall


#+begin_src shell :dir "/sudo::/home/jfriesen" :cache no :export source :results raw silent
  sudo ufw default deny incoming
  sudo ufw default allow outgoing
  sudo ufw enable
  sudo nmap localhost
  sudo ufw deny 139
  sudo ufw deny 161
  sudo ufw deny 5353
#+end_src

Where 139 is NETBIOS, 161 is SNMP, mDNS 5353, as per [[https://github.com/iAnonymous3000/popos-hardening-guide][GitHub -
iAnonymous3000/popos-hardening-guide]].  I’m sure there’s more to do, but for now
this is adequate.  However, there are refinements.

*** Open Snitch

The refining I'm thinking of is along the lines of MacOS’s Little Snitch (or
some alternative).  I didn’t use Little Snitch, favoring Lulu, but figure when
searching for alternatives, that Little Snitch is more known.

With a very baseline firewall in place, I set about finding a replacement.  The
first candidate is [[https://github.com/evilsocket/opensnitch][GitHub - evilsocket/opensnitch: OpenSnitch is a GNU/Linux
interactive application firewall inspired by Little Snitch]].

After downloading the files, I ran the following to install the Open Snitch
daemon:

#+begin_src shell :dir "/sudo::/home/jfriesen/Downloads/" :cache no :export source :results raw silent
  sudo apt install --assume-yes ./opensnitch*.deb
#+end_src

And the Open Snitch GUI:

#+begin_src shell :dir "/sudo::/home/jfriesen/Downloads/" :cache no :export source :results raw silent
  sudo apt install --assume-yes ./python3-opensnitch-ui*.deb
#+end_src

Along the way I learned about specifying =/sudo::/path/to/dir/= as the =:dir= option
for the shell.  This means I can run the command via =sudo= and babel will prompt
for my password.

Per the documentation, I needed to patch up my pip install with the following:

#+begin_src shell :dir "/sudo::/home/jfriesen" :cache no :export source :results raw silent
sudo apt install --assume-yes python3-pip
#+end_src

#+begin_src shell :dir "/home/jfriesen" :cache no :export source :results raw silent
pip3 install grpcio==1.41.0
pip3 install protobuf==3.20.0
#+end_src

I then added Open Snitch to my running services via the following:

#+begin_src shell :dir "/sudo::/home/jfriesen" :cache no :export source :results raw silent
  sudo systemctl enable --now opensnitch.service
#+end_src

Rather quickly, Little Snitch started asking me if I wanted to allow or block
connections.  There were some preliminary “allow forever” decisions that I
needed to make.

** DONE Clipboard Manager


On MacOS, I’ve been using Maccy.  And as more and more of my computering moves
to Emacs, the clipboard manager has become less crucial.  However, having a
history is very nice.

As part of my research, I stumbled upon the [[https://copyq.readthedocs.io/en/latest/index.html][CopyQ’s documentation]]; a
cross-platform clipboard manager.  I decided to give this a go in Linux, and if
it works start using it on MacOS.

From the documentation I ran:

#+begin_src shell :dir "/sudo::/home/jfriesen" :cache no :export source :results raw silent
sudo apt install software-properties-common
sudo add-apt-repository ppa:hluk/copyq
sudo apt update
sudo apt install copyq
#+end_src

With that installed, I was curious about how to ensure that CopyQ always
launched at login.  And there’s a settings in the preferences.

The primary function I wanted was to have a hot key that would provide a list of
paste options.  I bound =s-M-v= to CopyQ’s “Show the Menu Tray”; this gives me a
list of the last five copied items with the option to easily search for more.

CopyQ supports different themes; I wanted to keep the CopyQ theme synchronized
with the OS theme.

The following toggles the CopyQ theme based on the current state of my
workspace’s color scheme:

#+begin_src emacs-lisp
  (defun jf/linux:toggle-copyq-theme (&optional color-scheme)
      "Toggle the copyq theme based on current COLOR-SCHEME."
      (interactive)
      (let ((theme
              (if (eq :dark
                    (or color-scheme (jf/current-color-scheme-gnome)))
                "solarized-dark.ini"
                "solarized-light.ini"))
             (theme-dir
               (s-trim (shell-command-to-string "copyq info themes"))))
        (shell-command
          (concat "copyq loadTheme " (f-join theme-dir theme)))))
#+end_src

The above function is a proof of concept that I can then tie into my color
scheme toggling process (with modifications I’m sure).

** DONE Emacs Everywhere


I use the [[https://github.com/tecosaur/emacs-everywhere][Emacs Everywhere package]].  On MacOS I rely on [[https://www.hammerspoon.org/][Hammerspoon]] tool for
launching into Emacs.

In short this package, copies the current input field (e.g. a browser’s
textarea) into a dedicated Emacs buffer, I then edit the text in Emacs, and when
done paste the content back into the input field.

I have found this quite useful as I’ve also chosen to set that dedicated Emacs
buffer to use a focused writing context; akin to Writeroom.

As I’m running Pop OS, I followed the [[https://help.ubuntu.com/stable/ubuntu-help/keyboard-shortcuts-set.html.en][Ubuntu instructions for binding a custom
shortcut]].

I also needed to ensure that =pandoc= is installed.  With that done, I ran =M-x
emacs-everywhere-check-health=.  However, I observed a problem that was only
evident when I read the source code.  Namely things didn’t work.

Why?  Because in an earlier incarnation of keybindings, I had bound the =Insert=
key to =Hyper_R=; and =emacs-everywhere= used that key code to perform the “paste”
of the initial text into Emacs.

So I needed to unbind that key.

Further, the [[https://help.ubuntu.com/stable/ubuntu-help/keyboard-shortcuts-set.html.en][Ubuntu instructions for binding a custom shortcut]] did not work.  I
then tried using =xbindkeys=.  I followed [[https://dev-random.net/make-your-own-keybindings-in-linux-using-xbindkeys/][Make your own keybindings in linux using
xbindkeys]].

I installed =xbindkeys= via:

#+begin_src shell :dir "/sudo::/home/jfriesen/Downloads/" :cache no :export source :results raw silent
.  sudo apt-get install --assume-yes xbindkeys
#+end_src

My hasty initial entry, which was what was recorded in the Pop OS shortcut, was
as follows:

#+begin_example
  "emacsclient --eval '(emacs-everywhere)'"
    Alt + Super + e
#+end_example

That did not work.  Following further instructions, I used =xbindkeys -k= to
determine how it interpreted =Alt= + =Super= + =e=.  Which resulted in
=Alt+Mod2+Mod4 + e=.

I updated my =.xbindkeysrc= to reflect the above.  And things started working.

** DONE Get SyncThing Running

There are three parts to SyncThing:

- [[*Installing SyncThing][Installing SyncThing]]
- [[*Auto-Start SyncThing][Auto-Start SyncThing]]
- [[*Configuring SyncThing][Configuring SyncThing]]

In reviewing my setup, both [[*Elfeed with Existing Data][Elfeed with Existing Data]] and [[*Denote Files][Denote Files]] need data
from my old machine.  It makes sense to get SyncThing working, and pull that
information from my previous computer.

As a side quest, I want to use [[https://localsend.org/][LocalSend]] to get the Action ID of my SyncThing
instance on my old machine.

*** DONE Installing SyncThing

Following [[https://apt.syncthing.net/][Syncthing docs on installing on Debian/Ubuntu]] we have the following:

#+begin_src shell :dir "/sudo::/home/jfriesen" :cache no :export source :results raw silent
  sudo mkdir -p /etc/apt/keyrings
  sudo curl -L -o /etc/apt/keyrings/syncthing-archive-keyring.gpg https://syncthing.net/release-key.gpg
#+end_src

And I’d rather use stable than candidate, so I need to add the keyring:

#+begin_src shell :dir "/sudo::/home/jfriesen" :cache no :export source :results raw silent
echo "deb [signed-by=/etc/apt/keyrings/syncthing-archive-keyring.gpg] https://apt.syncthing.net/ syncthing stable" | sudo tee /etc/apt/sources.list.d/syncthing.list
#+end_src

And with the repository installed, I set about installing SyncThing:

#+begin_src shell :dir "/sudo::/" :cache no :export source :results raw silent
  sudo apt-get update --assume-yes
  sudo apt-get install syncthing --assume-yes
#+end_src

And from that I’ll need to configure my local SyncThing.

*** DONE Auto-Start SyncThing


Reading [[https://docs.syncthing.net/users/autostart.html#linux][Starting Syncthing Automatically]], I can add the =syncthring-start.desktop=
to my auto-start directions:

#+begin_src shell :dir "/home/jfriesen" :cache no :export source :results raw silent
  cp /usr/share/applications/syncthing-start.desktop ~/.config/autostart/
#+end_src

If this does not work, I can use =systemctl=.

*** DONE Configuring SyncThing


This is beyond the scope of this document; though perhaps best identified in a
SyncThing runbook.  It involves setting up local directories and connecting to
other devices in my SyncThing “ring”.

** DONE Elfeed with Existing Data


In [[https://takeonrules.com/2025/01/22/on-elfeed-and-backups/][On Elfeed and Backups]], I wrote about using Elfeed for my RSS reader.  I
restored the previous machine’s backup to my new machine.  And all things
worked; I had the old data and could fetch new information.

** DONE Denote Files


For most all of my writing I use Org-Mode, leveraging Denote for its file naming
convention as well as utility functions.  Getting those files from my old
machine is one of the last steps.

I used SyncThing to bring things over.  And with those files I checked if my
Emacs functions worked.  This is when I found that the <2025-04-30 Wed>
installed version of =fd= was =v8.3.1=.  Which lead to the install instructions
above.

For the time being, I’m sync-ing files from my old machine to the new machine.
At some point, I’ll flip that.

** DONE Publish Blog Post [100%]

This requires setting up my build engine.  Which involves:

- [[*Exchanging SSH Keys][Exchanging SSH Keys]]
- [[*Installing Hugo][Installing Hugo]]
- [[*Installing Ruby][Installing Ruby]]

*** DONE Exchanging SSH Keys

This involved logging into my VPS, adding my public key, and then confirming via
SSH to the host.

And last cloning the bare repository for my blog.  I needed this to know what
version of Ruby to build.  Being a bare repository, it is only the contents of
the =.git= directory; that is I can’t readily see the files of the project.

I then cloned the bare repository and checked out my =trunk= branch.[fn:8]

*** DONE Installing Hugo

I’ll need to [[https://gohugo.io/installation/linux/#prebuilt-binaries][either build Hugo from source or install a release version]].  I
chose the path of “Install Go-Lang then build Hugo”; in part because I write Go
code these days.

**** DONE Build Go-Lang


The following assumes I’ve downloaded the correct Go-lang tar ball.  It also
installs go-lang as a non-privileged user:

#+begin_src shell  :cache no :export source :results raw silent
  rm -rf ~/.local/go ; tar -C ~/.local -xzf ~/Downloads/go1.24.2.linux-amd64.tar.gz
#+end_src

I needed to add go into my =$PATH=.  And set some other Go specific environment
variables:

#+begin_example
export GOPROXY=https://proxy.golang.org,direct
export GOTOOLCHAIN=auto
export GOROOT=$HOME/.local/go
export GOPATH=$HOME/go
#+end_example

The =GOPROXY= variable took some looking around.  Along the way, I mixed up the
=GOPATH= and =GOROOT= which created numerous problems.  Once I fixed that, it was
smooth sailing.

**** DONE Install Hugo via Go


I then used Go to install Hugo:

#+begin_src shell :cache no :export source :results raw silent
  CGO_ENABLED=1 go install -tags extended,withdeploy \
                github.com/gohugoio/hugo@latest
#+end_src

**** DONE Testing My Site


With Hugo built, I wanted to verify that I could run my blog locally.  I ran
=hugo serve= and encountered the following error:

#+begin_example
  executing "_shortcodes/marginfigurewithcaption.html" at <$original.Resize>: nil
  pointer evaluating resource.Resource.Resize
#+end_example

This was a bit of a head scratcher; as it worked on my Macbook but not on my
Linux machine.  I had different versions of Hugo, so I synchronized those, and
still had the error on my Linux machine but not my Macbook.

I eventually found the problem, the src image path was =/images/Droaam-map.png=
but on the filesystem, the filename was =/images/droaam-map.png=.  This didn’t
raise an issue on my Macbook likely because I had some setting about files being
case agnostic.

I updated the reference to use the correct case, and then my site worked.  I
could visit it on my localhost.

*** DONE Installing Ruby


First is following some instructions around Ruby Environment (=rbenv=) manager.
Looking at package manager options, it appears that [[https://github.com/rbenv/rbenv?tab=readme-ov-file#basic-git-checkout][cloning is the best option]].

The [[https://github.com/rbenv/rbenv?tab=readme-ov-file#basic-git-checkout][Github instructions for building =rbenv= from source]] are a bit confusing.
Namely, After running the first three steps, I ran =rbenv -h= which listed the
=rbenv install= command but it did not work.

I needed to install the =ruby-build= plugin (as [[https://github.com/rbenv/rbenv?tab=readme-ov-file#installing-ruby-versions][documented later in the rbenv
build instructions]]).  I followed the [[https://github.com/rbenv/ruby-build?tab=readme-ov-file#clone-as-rbenv-plugin-using-git][Github instructions to “clone as rbenv
plugin using git”]].

That did not work.  So, I then followed the instructions to add the =ruby-build=
plugin

After following both instructions, I could run =rbenv install –list= to see a list
of Ruby versions to install.

However, I had a missing dependency: =libyaml-dev=; which manifested as a failure
to build the =Psych= module.  So I installed that:

#+begin_src shell :dir "/sudo::/" :cache no :export source :results raw silent
  sudo apt update && sudo apt install libyaml-dev --assume-yes
#+end_src

And gave another go at things.  Which worked.

*** DONE Build my Website


Using my bespoke process I set about building my website.  There were a few
bumps along the way; namely that some of my audit processes used the Silver
Searcher (e.g., =ag=).  I didn’t want to go about installing =ag= so I updated those
audit scripts to use Ripgrep (e.g. =rg=).

And things were building!

*** DONE Write a Blog Post

Writing my blog post involves:

- Creating a Denote file, via =M-x org-capture= and selecting “Blog Post.”
- Writing the posting
- Running my =M-x jf/export-org-to-tor= command
- Visiting my blog’s Hugo directory and running my bespoke one shot publish
  command (e.g. =rake one_shot_publish=).

** DONE Export Org-Mode to PDF

I use Org-Mode as my base line markdown.  And like having the ability to export
my documents to a PDF format.  That requires LaTeX:

#+begin_src shell :dir "/sudo::/" :cache no :export source :results raw silent
  sudo apt install --assume-yes texlive-latex-base
  sudo apt install --assume-yes texlive-latex-recommended
  sudo apt install --assume-yes texlive-latex-extra
  sudo apt install --assume-yes texlive-luatex
  sudo apt install --assume-yes texlive-pictures
  sudo apt install --assume-yes texlive-bibtex-extra
  sudo apt install --assume-yes texlive-science
#+end_src

And to test, I found a small Org-Mode node, ran =M-x org-export-dispatch= and
narrowed to the sub-tree, chose “Export at LaTeX” then “as PDF and open.”

It generated a PDF and opened that PDF in an Emacs window.  Success!

** TODO Debian Backports

I was curious about setting up backports for Debian:

#+begin_src shell :dir "/sudo::/" :cache no :export source :results raw silent
  sudo curl -fsSLo /usr/share/keyrings/debian-bookworm.asc \
       https://ftp-master.debian.org/keys/archive-key-12.asc
#+end_src

#+begin_src shell :dir "/sudo::/" :cache no :export source :results raw silent
  echo "deb [signed-by=/usr/share/keyrings/debian-bookworm.asc arch=$( dpkg --print-architecture )] http://deb.debian.org/debian bookworm-backports main" | sudo tee /etc/apt/sources.list.d/debian-bookworm.list’
#+end_src

** TODO Read and Compose Emails in Emacs [83%]

This is a lower priority, but one that I want to eventually want.  As such, I’m
deferring.  For this to work, I need to:

- [[*Install Proton Bridge][Install Proton Bridge]]
- [[*Install mbsync][Install mbsync]]
- [[*Configure mbsync][Configure mbsync]]
- [[*Read an Email][Read an Email]]
- [[*Send an Email][Send an Email]]

*** DONE Install Proton Bridge

I visited [[https://proton.me/mail/download#bridge][Download the Proton Mail App for iOS, Android & Desktop]], and
downloaded the Linux > Debian package.  Then installed the downloaded package.

I launched Proton Bridge, authenticated, and started the configuration process.

*** DONE Install mbsync

I suppose the first step is to install =mbsync=; which is not in the package
repository.  Though =apt search mbsync= turned up =isync=, which provides the =mbsync=
command.  I’ll take note and proceed.

#+begin_src shell :dir "/sudo::/home/jfriesen/" :cache no :export source :results raw silent
  sudo apt install isync --assume-yes
#+end_src

That installed =mbsync=; so I think we’re good to proceed to configuration.

*** DONE Configure mbsync
CLOSED: [2025-05-06 Tue 22:07]
:LOGBOOK:
- State "DONE"       from "TODO"       [2025-05-06 Tue 22:07]
:END:

In MacOS, I was using the =security= command and needed an alternative.  This will
likely mean I need to introduce a shell command that switches based on OS.

#+begin_src shell :dir "/sudo::/" :cache no :export source :results raw silent
sudo apt install libsecret-tools
#+end_src

I spent a bit of time looking around for how to then work with these values.
[[https://askubuntu.com/questions/470384/is-it-possible-to-use-secret-tool-to-lookup-existing-seahorse-passwords][command line - Is it possible to use secret-tool to lookup existing seahorse
passwords? - Ask Ubuntu]] provided me with the best insight.  I ran the following

I ran the following from the command line:

#+begin_example
secret-tool store --label="ProtonBridgePassword" server proton-bridge login jeremy@jeremyfriesen.com
#+end_example

And provided my Proton Bridge password.

Then I set the =PassCmd= in my =~/.mbsync= file to the following:

#+begin_example
PassCmd "secret-tool lookup server proton-bridge login jeremy@jeremyfriesen.com"
#+end_example

With my keyring unlocked, this provides the password for synchronization.

I ran =mbsync -a= and all worked.
*** TODO Install mu4e

I originally set about using the mu4e package (e.g., =apt install mu4e=).  That
package is at version 1.6.x.  And I was running into problems getting things to
load.  I’m uncertain if that version works with Emacs version 30.1.

Regardless, I set about following [[https://www.djcbsoftware.nl/code/mu/mu4e/Installation.html][Installation (Mu4e 1.12.8 user manual)]]

Version: mu-1.12.10

curl
tar -xf ~/Downloads/<version>.tar.xz --directory ~/source

#+begin_src shell :dir "/home/jfriesen" :cache no :export source :results raw silent
  cd source/mu-1.12.10/ ; ./autogen.sh && make
#+end_src

#+begin_src shell :dir "/sudo::/home/jfriesen" :cache no :export source :results raw silent
  cd source/mu-1.12.10; sudo make install
#+end_src

I then needed to reconcile [[https://github.com/jeremyf/dotemacs/blob/b996a6fecf4593e227ae87f232e4ce98602ee874/emacs.d/personal.el#L772][my =mu4e= load-path in Emacs]].  This took a bit of
sleuthing, ultimately I settled on =/usr/local/share/emacs/site-lisp/mu4e/=.

I only use =mu4e= on my personal machine; but opted to add a conditional to allow
for me to have either a MacOS install location via home brew or apt.

I then needed to initialize =mu= via the following:

#+begin_src bash :results scalar replace :exports both :tangle yes
mu init --my-address jeremy@jeremyfriesen.com
#+end_src

#+RESULTS:
#+begin_example
mu has been created with the following properties:
+-------------------+---------------------------------+
| property          | value                           |
+-------------------+---------------------------------+
| maildir           | /home/jfriesen/Maildir          |
+-------------------+---------------------------------+
| database-path     | /home/jfriesen/.cache/mu/xapian |
+-------------------+---------------------------------+
| schema-version    | 500                             |
+-------------------+---------------------------------+
| max-message-size  | 100000000                       |
+-------------------+---------------------------------+
| batch-size        | 50000                           |
+-------------------+---------------------------------+
| created           | Wed May  7 20:54:34 2025        |
+-------------------+---------------------------------+
| personal-address  | jeremy@jeremyfriesen.com        |
+-------------------+---------------------------------+
| messages in store | 0                               |
+-------------------+---------------------------------+
| support-ngrams    | no                              |
+-------------------+---------------------------------+
| last-change       | never                           |
+-------------------+---------------------------------+
| last-index        | never                           |
+-------------------+---------------------------------+
Database is empty. You can use 'mu index' to fill it.
#+end_example

*** DONE Read an Email
CLOSED: [2025-05-07 Wed 21:10]
:LOGBOOK:
- State "DONE"       from "TODO"       [2025-05-07 Wed 21:10]
:END:

I ran =M-x mu4e= and started indexing my email and reading messages.

There were a few different pathways I took in fiddling with =mu4e=; and I think
I’d prefer the =apt install= route, but I have something that works.

I read an unread message, updated =mu4e= and checked in another client—the message
was marked as read!

*** DONE Send an Email
CLOSED: [2025-05-07 Wed 22:37]
:LOGBOOK:
- State "DONE"       from "TODO"       [2025-05-07 Wed 22:37]
:END:

I need to get =msmtp= installed:

#+begin_src shell :dir "/sudo::/" :cache no :export source :results raw silent
  sudo apt install msmtp --assume-yes
#+end_src

The whole process was far more complicated than I would’ve thought.  I had two
permission problems:

- The Proton Mail Bridge certificate was not trusted
- The =msmtp= process could not log its output.

My final configuration for my =~/.msmtprc= is as follows:

#+begin_src text :tangle ~/.msmtprc
  # Set default values for all the accounts.
  defaults
  # LOGGING: For Macos (and what I started with)
  # logfile ~/Maildir/msmtp.log
  # LOGGING: For Linux
  logfile ~/.msmtp.log
  # CERT: For Linux
  tls_trust_file /etc/ssl/certs/ca-certificates.crt
  tls on
  tls_starttls on

  # Account details for foo@bar.tld
  account proton
  auth on
  host 127.0.0.1
  port 1025
  protocol smtp
  from Jeremy Friesen
  user jeremy@jeremyfriesen.com
  # Password: for MacOS
  # passwordeval security find-generic-password -s proton-bridge -a jeremy@jeremyfriesen.com -w
  # Password: for Linux
  passwordeval secret-tool lookup server proton-bridge login jeremy@jeremyfriesen.com

  # Default
  account default : proton
  #+end_src

First, the certificate error:

#+begin_quote
  TLS certificate verification failed: The certificate is NOT trusted. The
  certificate issuer is unknown.
#+end_quote

I needed to add the ProtonBridge certificate into my ca-certificates.  This meant converting the =pem= to a =crt= file:

#+begin_src shell :dir "~/" :cache no :export source :results raw silent
  cd ~/Maildir/certificates
      openssl x509 -outform der -in cert.pem -out proton.crt
#+end_src

Then I moved the =proton.crt= into a sub-directory of =/usr/share/ca-certificates/=:

#+begin_src shell :dir "/sudo::/" :cache no :export source :results raw silent
  sudo chown root:root /home/jfriesen/Maildir/certificates/proton.crt
  sudo mkdir -p /usr/share/ca-certificates/proton/

  sudo mv  /home/jfriesen/Maildir/certificates/proton.crt \
        /usr/share/ca-certificates/proton/
#+end_src

I ran =sudo dpkg-reconfigure ca-certificates=, selecting the =ask= prompt.  Then
scrolled to the =proton.crt= and selected it.  I confirmed the selection and the
output noted that I added 1 certificate.

This solved the problem of the failed verification (and I could send emails, but
not without logging errors).

Resolving the logging errors lead me down the pathway of learning just a bit
about the =apparmor= package (from [[https://askubuntu.com/questions/878288/msmtp-cannot-write-to-var-log-msmtp-msmtp-log][server - msmtp cannot write to
/var/log/msmtp/msmtp.log - Ask Ubuntu]]).

I ran =cat /etc/apparmor.d/usr.bin.msmtp= and looked for allowed logs:

#+begin_src bash :results scalar replace :exports both :tangle yes
  cat /etc/apparmor.d/usr.bin.msmtp | rg log
#+end_src

#+RESULTS:
:   owner @{HOME}/.msmtp*.log wk,
:   /var/log/msmtp            wk,
:   owner @{HOME}/.cache/msmtp/*.log wk,
:   @{PROC}/@{pid}/loginuid r,

Which led me to change my initial log from =~/Maildir/msmtp.log= to =~/.msmtp.log=.
I suppose I’ll need to consider log rotation.  Though really =/dev/null= would
work for me.

I sent an email to myself, and things worked.

** DONE Interact with Mastodon via Emacs

For this to work, I ran =M-x mastodon= and followed the instructions: With the
authorization URL in the clipboard, visit that URL, login to the Mastodon
instance, and authorize the application.  Once authorized, copy the code and
paste it into Emacs’s prompt.

Emacs then took care of storing the token in a PGP encrypted auth-info file.

* TODO Put Stickers on Laptop

My Macbook has two or so layers of stickers.  Each a memory of something I
cherish.  I don’t think I’ll be able to recover those stickers.  But instead
will take a photo of what I have and keep it.

We did this very thing while we were sorting through our family keepsakes.  Our
children had brought home lots of art, and keeping some of the bulky stuff was
impractical.  So we posed holding the art work and took a photo.

These photos are ones I’d consider printing and themselves keeping.

* TODO Cleanup [0%]

As I’ve been working on this migration, I’ve noted a few adjustments I needed to
make that are a bit more involved:

- [[*Reconcile dot zsh files][Reconcile dot zsh files]]
- [[*Ensure my Xmodmap is Running at Login][Ensure my Xmodmap is Running at Login]]

Other adjustments, I’ve made along the way ([[https://github.com/jeremyf/dotzshrc/commit/0d59084d785aa4d16ae4e782d23df8cdd5f221c2][such as a minor tweak to my =$EDITOR=
command]]).

** TODO Reconcile dot zsh files

During the process of migration, I made changes to my dot zsh files.  These
changes were:

- Adding a =.zshenv= file, which I copied from my =.zprofile=
- Commenting out code that was MacOS specific

Ideally, I want to consolidate my =.zprofile=, =.zshrc=, and =.zshenv=.  I also want
to convert the commented out code into code that conditionally runs based on
operating system.

** TODO Ensure my Xmodmap is Running at Login

I would love the moment that I login to my computer, that the =Caps Lock= key
would send =Control=.  However, at present that is not happening.

I work around this because one of my first actions on login is to open Terminal;
which sets my keybindings.

* Deferred

This section reflects “learnings I had along the way, but chose not to further
pursue.”

** On I3

A configurable and well-documented tiling window manager.  I performed the
following steps to get it running:

- =sudo apt install i3=
- =sudo update-alternatives --install /usr/bin/x-session-manager x-session-manager /usr/bin/i3 60=

To remove i3 as my window manager of choice I ran:

=sudo update-alternatves --remove x-session-manager /usr/bin/i3=

*** I3 Config

What follows is my [[https://i3wm.org/][I3]] config:

#+begin_src text :tangle ~/.config/i3/config
  # NOTE: This file was generated by org-tangle from
  #       ~/git/dotzshrc/runbooks/linux.org
  #
  # This file began its existence as the output of i3-config-wizard.  Since then
  # it has underwent modifications.
  #
  # Its present form is that of a an i3 config file (v4)
  #
  # Please see https://i3wm.org/docs/userguide.html for a complete reference!

  # I'm looking at mapping Mod5 to one of those "old-timey" keys that wasn't
  # available on a Mac (e.g. "print screen", "insert", etc.)
  #
  # This lets my Emacs keybindings remain untouched.
  set $mod Mod5

  # Emacs is the core of my computering.  The command, as written is not
  # adequate, but it is a good place-holder.
  exec --no-startu-id emacs ~/

  # Font for window titles. Will also be used by the bar unless a different font
  # is used in the bar {} block below.
  font pango:monospace 8

  # This font is widely installed, provides lots of unicode glyphs, right-to-left
  # text rendering and scalability on retina/hidpi displays (thanks to pango).
  #font pango:DejaVu Sans Mono 8

  # Start XDG autostart .desktop files using dex. See also
  # https://wiki.archlinux.org/index.php/XDG_Autostart
  exec --no-startup-id dex --autostart --environment i3

  # https://wiki.archlinux.org/index.php/XDG_Autostart
  exec --no-startup-id dex --autostart --environment i3

  # The combination of xss-lock, nm-applet and pactl is a popular choice, so
  # they are included here as an example. Modify as you see fit.

  # xss-lock grabs a logind suspend inhibit lock and will use i3lock to lock the
  # screen before suspend. Use loginctl lock-session to lock your screen.
  exec --no-startup-id xss-lock --transfer-sleep-lock -- i3lock --nofork

  # NetworkManager is the most popular way to manage wireless networks on Linux,
  # and nm-applet is a desktop environment-independent system tray GUI for it.
  exec --no-startup-id nm-applet

  # Use pactl to adjust volume in PulseAudio.
  set $refresh_i3status killall -SIGUSR1 i3status
  bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status
  bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% && $refresh_i3status
  bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
  bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status

  # Use Mouse+$mod to drag floating windows to their wanted position
  floating_modifier $mod

  # move tiling windows via drag & drop by left-clicking into the title bar,
  # or left-clicking anywhere into the window while holding the floating modifier.
  tiling_drag modifier titlebar

  # Kill and relaunch Emacs
  mode "exec" {
    bindsym e exec "edaemon; e ~/ -c"
    bindsym l exec "librewolf"
    bindsym m exec "mullvad"
    # bindsym v exec "vpn"
    bindsym t exec i3-sensible-terminal

    bindsym Return mode "default"
    bindsym Escape mode "default"
    bindsym $mod+x mode "default"
  }
  bindsym $mod+x mode "exec"

  # kill focused window
  bindsym $mod+Shift+q kill

  # start a program launcher
  # TODO: explore rofi https://wiki.archlinux.org/title/Rofi
  bindsym $mod+space exec --no-startup-id dmenu_run

  # A more modern dmenu replacement is rofi:
  # bindcode $mod+40 exec "rofi -modi drun,run -show drun"
  # There also is i3-dmenu-desktop which only displays applications shipping a
  # .desktop file. It is a wrapper around dmenu, so you need that installed.
  # bindcode $mod+40 exec --no-startup-id i3-dmenu-desktop

  mode "focus" {
    bindsym b focus left
    bindsym Left focus left

    bindsym n focus down
    bindsym Down focus down

    bindsym p focus up
    bindsym Up focus up

    bindsym f focus right
    bindsym Right focus right

    bindsym Return mode "default"
    bindsym Escape mode "default"
    bindsym $mod+f mode "default"
  }
  bindsym $mod+f mode "focus"

  mode "move" {
    bindsym b move left
    bindsym Left move left

    bindsym n move down
    bindsym Down move down

    bindsym p move up
    bindsym Up move up

    bindsym f move right
    bindsym Right move right

    bindsym Return mode "default"
    bindsym Escape mode "default"
    bindsym $mod+m mode "default"
  }
  bindsym $mod+m mode "move"

  mode "split" {
    bindsym h split h
    bindsym v split v

    bindsym Return mode "default"
    bindsym Escape mode "default"
    bindsym $mod+s mode "default"
  }
  bindsym $mod+s mode "split"

  mode "layout" {
    bindsym f fullscreen toggle
    bindsym s layout stacking
    bindsym w layout tabbed
    bindsym e layout toggle split

    bindsym Return mode "default"
    bindsym Escape mode "default"
    bindsym $mod+l mode "default"
  }
  bindsym $mod+l mode "layout"

  # toggle tiling / floating
  bindsym $mod+/ floating toggle

  # change focus between tiling / floating windows
  # bindsym $mod+shift+/ focus mode_toggle

  # focus the parent container
  #bindsym $mod+a focus parent

  # focus the child container
  #bindsym $mod+d focus child

  # Define names for default workspaces for which we configure key bindings later on.
  # We use variables to avoid repeating the names in multiple places.
  set $ws1 "1"
  set $ws2 "2"
  set $ws3 "3"
  set $ws4 "4"
  set $ws5 "5"
  set $ws6 "6"
  set $ws7 "7"
  set $ws8 "8"
  set $ws9 "9"
  set $ws10 "10"

  # switch to workspace
  bindsym $mod+1 workspace number $ws1
  bindsym $mod+2 workspace number $ws2
  bindsym $mod+3 workspace number $ws3
  bindsym $mod+4 workspace number $ws4
  bindsym $mod+5 workspace number $ws5
  bindsym $mod+6 workspace number $ws6
  bindsym $mod+7 workspace number $ws7
  bindsym $mod+8 workspace number $ws8
  bindsym $mod+9 workspace number $ws9
  bindsym $mod+0 workspace number $ws10

  # move focused container to workspace
  bindsym $mod+Shift+1 move container to workspace number $ws1
  bindsym $mod+Shift+2 move container to workspace number $ws2
  bindsym $mod+Shift+3 move container to workspace number $ws3
  bindsym $mod+Shift+4 move container to workspace number $ws4
  bindsym $mod+Shift+5 move container to workspace number $ws5
  bindsym $mod+Shift+6 move container to workspace number $ws6
  bindsym $mod+Shift+7 move container to workspace number $ws7
  bindsym $mod+Shift+8 move container to workspace number $ws8
  bindsym $mod+Shift+9 move container to workspace number $ws9
  bindsym $mod+Shift+0 move container to workspace number $ws10

  # reload the configuration file
  bindsym $mod+Shift+c reload
  # restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
  bindsym $mod+Shift+r restart
  # exit i3 (logs you out of your X session)
  bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"

  # resize window (you can also use the mouse for that)
  mode "resize" {
    # These bindings trigger as soon as you enter the resize mode

    # Pressing left will shrink the window’s width.
    # Pressing right will grow the window’s width.
    # Pressing up will shrink the window’s height.
    # Pressing down will grow the window’s height.
    bindsym j resize shrink width 10 px or 10 ppt
    bindsym k resize grow height 10 px or 10 ppt
    bindsym l resize shrink height 10 px or 10 ppt
    bindsym semicolon resize grow width 10 px or 10 ppt

    # same bindings, but for the arrow keys
    bindsym Left resize shrink width 10 px or 10 ppt
    bindsym Down resize grow height 10 px or 10 ppt
    bindsym Up resize shrink height 10 px or 10 ppt
    bindsym Right resize grow width 10 px or 10 ppt

    # back to normal: Enter or Escape or $mod+r
    bindsym Return mode "default"
    bindsym Escape mode "default"
    bindsym $mod+r mode "default"
  }

  bindsym $mod+r mode "resize"

  # Start i3bar to display a workspace bar (plus the system information i3status
  # finds out, if available)
  bar {
  status_command i3status --config ~/.config/i3/i3status.conf
  }

#+end_src

*** I3 Status Config

I found the default I3 status bar to be very chatty.  I stripped that down for
less chatter.

#+begin_src text :tangle ~/.config/i3/i3status.conf
  # NOTE: This file was generated by org-tangle from
  #       ~/git/dotzshrc/runbooks/linux.org
  general {
     colors = true
     interval = 5
  }

  order += "wireless wlan0"
  order += "disk /"
  order += "tztime local"
  order += "battery 0"
  order += "load"

  tztime local {
    format = "%Y-%m-%d %H:%M"
  }

  battery 0 {
    format = "%status %percentage %remaining %emptytime"
    format_down = "No battery"
    status_chr = "⚡ CHR"
    status_bat = "🔋 BAT"
    status_unk = "? UNK"
    status_full = "☻ FULL"
    path = "/sys/class/power_supply/BAT%d/uevent"
    low_threshold = 10
  }

  load {
    format = "%5min"
  }

  disk "/" {
    format = "%free"
  }
#+end_src

*** Considerations

I’m accustomed to a “system tray” in MacOS that includes actionable icons:

- VPN, which shows both status as well as allows for “clicking” to change.
- ProtonBridge, which shows the status of whether its running (and thus I can
  pull email from the server).
- Bluetooth indicator
- Logout button

I’m unclear how those icons might behave, or how I might assemble that using I3.



* Reflections

Up until I had installed Emacs, everything felt tenuous.  I was using Terminal
and Nano; and it all felt fragile.  I wanted to take notes and keep track of
what I was trying.

Once I had Emacs, I could lean into my writing ecosystem and everything started
falling into place.  I did find that shifting between writing what I was doing
and getting it done introduced a mental drain.

To address the drain, I adopted a “Make a Checklist” strategy.  I’d quickly
break down the steps, mark them as todo, and start chipping away at them.  The
simple act of task breakdown gave a burst of energy, which meant I would
invariably start on a task.

And having something started, without finishing it, was a good way to ensure I
had something I could return to.

Were I to do this again, I’d consider installing Emacs via the Pop Shop; it has
the v30.1 available.  That would’ve helped me get “comfortable” in my computing
environment.

Another set of “rabbit trails” was my often-used Emacs functions that were MacOS
specific.  I spent time exploring how to introduce conditionals and then do the
“same thing” in Linux as I did in MacOS.

One of those was the toggling of dark and light themes.  I was doing this
migratory work before sunrise, during lunch, immediately after work, or just
around sunset.  Having control of my display was important.

As was my ability to “grab” browser links.  This required a reworking of the
=grab-x-links= package, to reflect having multiple Firefox forks as viable
browsers (e.g., [[https://mullvad.net][Mullvad Browser]] and [[https://librewolf.net/][LibreWolf]]).

Most important, as I reflect it is evident that having pushing things to Emacs
has meant I have a meta-Operating System; one that provides a buffer between me
and my operating system.  Yet, more important, one that allows me to more easily
“program” my interaction with my operating system.

At present I’m not using [[https://i3wm.org/][I3]]; it’s something I’m considering but I figure use
what I have and see how that works.

* Footnotes

[fn:1] Run =M-x org-babel-tangle= to perform the updates.

[fn:2] An advantage is that the XModmap modifications, as implemented, are on a
per-user basis.

[fn:3] A couple of days into this, I can say I’m remapping the memories.  But the
higher the “stress” moment (e.g., pairing) the deeper ingrained memory takes
hold.  But I look to this remapping as an exercise of mental nimbleness.

[fn:4] I had a copy of the Emacs git repository on another machine.  So I used the
sneaker net (e.g. a thumbdrive) to copy that over to the Linux machine and then
run =git pull= so I could get up to date source code.

[fn:5] My mom has a retinal disease and her research and recommendations from
experts leads her to incorporate more red filters in her day to day.

[fn:6] I’ve noticed that when I use =Cmd+Tab= to jump between applications I am just
a bit more prone to accept a distraction.  Also that I’m using this as some sort
of reflex to seek distraction.

[fn:7] [[https://i3wm.org/][I3]] was also the documentation that detailed =update-alternatives=; which
equipped me to further explore.

[fn:8] The =trunk= instead of =main= is from the early days of our collective effort of
renaming all =master= branches to something else.

[fn:9] A consumer-grade older HP laptop.

[fn:10] Someday I hope they release version =v1.0.0=.
