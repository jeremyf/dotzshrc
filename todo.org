#+title Todo for dotzshrc

* Maintenance
** DONE Upgrade ~org-roam~ to v2
** DONE Topical Capture Template

Submitted as Issue to org-roam Github repository: https://github.com/org-roam/org-roam/issues/1681

*tl;dr* Adding a =filter-fn= parameter to ~org-roam-capture~ and a =templates= parameter to ~org-roam-capture~ , ~org-roam-node-insert~, ~org-roam-node-find~ would improve their general utility, and reduce fiddling with the more inner functionality of ~org-roam-capture-~ and ~org-roam-node-read~

*** On ~org-roam~ contexts

In [[https://takeonrules.com/2020/11/09/using-emacs-while-running-online-games/][Using Emacs While Running Online Games // Take on Rules]], I wrote about a conceptual context.  To paraphrase, when I am running my New Vistas in the Thel-Sector game, I make regular use of ~org-roam~ features.  However, duing those sessions, I am only concerned about finding notes that are tagged =#thel-sector=, and when I capture a note, I always want to use a thel-sector specific template.

*** Desired Functionality

#+BEGIN_SRC
Given that I have toggled on an org-roam context
When I create a nodetod
Then I am only offered a choice from the given context’s list

Given that I have toggled on an org-roam context
When I search for a node
Then the results only include nodes from the given context

Given that I have toggled on an org-roam context
When I create a daily node
Then the template uses the org-daily template
#+END_SRC

*** The Four Main Functions
:PROPERTIES:
:ID:       9604DD99-B316-43BC-9ED2-F7FD639F76E3
:END:

There are four functions to consider:

- ~org-roam-capture~ :: This function finds or creates a node then prompts for action (Save, Cancel, or Refile).
- ~org-roam-dailies-capture-today~ :: This function creates a new node in the daily template.
- ~org-roam-node-insert~ :: This function finds or creates a node then inserts a link to that node in the originating buffer.
- ~org-roam-node-find~ :: This function finds a node and opens it in a new buffer.

Each of these call two parameterized functions:

- ~org-roam-node-read~ :: relevant is the ~filter-fn~ parameter, which allows for narrowing of nodes presented for selection.
- ~org-roam-capture-~ :: relevant is the ~templates~ keyed parameter, which provides the list of applicable ~org-roam~ templates.

#+caption: Function Exposes Parameter
| Function                         | ~filter-fn~ | ~templates~ |
|----------------------------------+-------------+-------------|
| ~org-roam-capture~               | No          | No          |
| ~org-roam-dailies-capture-today~ | No          | No          |
| ~org-roam-node-insert~           | Yes         | No          |
| ~org-roam-node-find~             | Yes         | No          |

*** Two Approaches

Ideally ~org-roam-capture~, ~org-roam-node-insert~, and ~org-roam-node-find~ would expose the ~filter-fn~ and ~templates~ parameter.  This would allow easier usage of those multi-purpose functions.  The solution would be to create one outer function for each of the capture, insert, and find.

However, without those parameterizations, I’m considering using the ~advice-add~ feature of Emacs.  I would add advice around both the ~org-roam-node-read~ and the ~org-roam-capture-~ functions.

In my experience, meddling with an inner function (e.g., ~org-roam-node-read~ and ~org-roam-capture-~) creates more precarious situations.  That change impacts all callers of those inner functions.

*** Two Scenarios

There are two main scenarios to consider:

1. I use my ~hydra~ menu to select a temporary context (e.g., I’m wanting to interact with a game note).
2. A set ~org-roam~ context (e.g., I’m running a game and want all of my org-roam activity to default to that context).

In the case of the ~hydra~ menu, I could rely on the normal ~template~ selection mechanism and no applicable ~filter-fn~.  However, when I’m about to find or create a node, I often have a narrowing concept in mind already (e.g., I already know that I want to write something for my game, let’s narrow it according to the relevant tag and only use the game related templates.)

In the case of the ~org-roam~ context, there’s a need to manage state.  Once I’ve toggled on that context, I could overwrite the =kbd= settings for the the capture, insert, and find functions (but not the daily).
*** Approaches Overlaying with Scenarios

Now that I’ve established the two scenarios and the two different approaches, I want to explore how I would implement that.  I also want to look at the challenges.

**** Outer Function Approach for Hydra Menu Scenario

For each applicable ~org-roam~ context, I would create three functions that “wrap” the capture, find, and insert behavior.  Then I would add those functions as menu items in the Hydra menu.

**** Advising Function Approach for Hydra Menu Scenario

For each applicable ~org-roam~ context, I would create five functions: three for the outer functions (capture, find, and insert) and two advising functions (one for ~org-roam-node-read~ and one for ~org-roam-capture-~).  The three outer functions would follow three steps:

1. Add the advising functions
2. Call the inner function (e.g., my context capture would then call ~org-roam-capture~)
3. Remove the advising functions

**** Outer Function Approach for Org Roam Context

As the Outer Function Approach for Hydra Menu Scenario, except that when I’ve toggled on the ~org-roam~ context the =kbd= incantations for the original capture, find, and insert would map to the context specific functions.

**** Advising Function Approach for Org Roam Context

As the Advising Function Approach for Hydra Menu Scenario, except that when I’ve toggled on the ~org-roam~ context the =kbd= incantations for the original capture, find, and insert would map to the context specific functions.

*** Analysis of Approaches Overlaying with Scenarios

In the case of writing an outer function, I would write three functions per context.  In the case of advising function, I would need to write five functions.  However, for the outer function method to work, I would need the three functions (e.g., ~org-roam-capture~, ~org-roam-node-insert~, ~org-roam-node-find~) parameterized to each accept a =filter-fn= and =templates= parameter.

I’m uncertain what the issues would be if I had an active ~org-roam~ context and performed nested ~org-roam-capture~ calls.  With advising functions, I may end up detaching the function then attempting to detach an advising function that’s no longer attached.

** Capture Templates

Review capture templates; can I reduce the number of templates if I have adequate auto-tagging.  For example, does the org-roam capture template allow for a variable for tags?  If so, can I use a wrapping function to assign tags.

When I’m running or playing an RPG session, I typically want to auto-tag all ~org-roam~ nodes that I create with one or more tags.  Conceptually, I have a list of “contexts” and each “context” has a list of tags to apply.  Then I can apply additional tags.

** Directory Structure

Review directory structure; at present the directories add tags, this may require further adjustments.

* Hacking

- [X] I want a “roll expression at point” function
- [ ] I want the option for rolling an expression to write the result to the buffer with =⇢ result=