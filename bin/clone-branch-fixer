#!/usr/bin/env ruby -w

require 'pathname'
require 'optparse'
command_name = File.basename(__FILE__)
config = {
  directory: Pathname.new(File.join(ENV['HOME'], "git")),
  shallow: false,
  output: $stdout,
  from: "master",
  to: "main",
  skip_file: nil
}

optparse = OptionParser.new do |options|
  # This banner is the first line of your help documentation.
  options.set_banner "Usage: #{command_name} [options]\n\n"

  options.on_head("-d DIRECTORY", "--directory", String, %(The path to the directory with git repositories\n#{' ' * 37}(Default: "#{config[:directory]}"))) do |dir|
    config[:directory] = Pathname.new(dir)
  end

  options.on("-s SHALLOW", "--shallow", %(Limit renaming to only direct subdirectories of DIRECTORY\n#{' ' * 37}(Default: "#{config[:shallow].inspect}"))) do |shallow|
    config[:shallow] = shallow
  end

  options.on("-f FROM", "--from", String, %(What is the branch name we're renaming\n#{' ' * 37}(Default: "#{config[:from]}"))) do |from|
    config[:from] = from
  end

  options.on("-t TO", "--to", String, %(What is the new branch name\n#{' ' * 37}(Default: "#{config[:to]}"))) do |to|
    config[:to] = to
  end

  options.on("-o OUTPUT", "--output", String, %(To what file should we output the report\n#{' ' * 37}(Default: "#{config[:output]}"))) do |output|
    config[:output] = output
  end

  options.separator('')

  options.on_tail('-h', '--help', "You're looking at it!") do
    warn options
    exit 1
  end
end

begin
  optparse.parse!
  mandatory = %i[directory from to]
  missing = mandatory.select { |param| config[param].nil? }
  raise OptionParser::MissingArgument, missing.join(', ') unless missing.empty?
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
  warn "\e[0m\e[1m\e[31m#{$!}\e[0m\n"
  warn optparse
  exit
end

uncleans = []
from_branch_missing = []
from_branch_missing_but_has_to_branch = []
manually_skipped = []
changed = []
# If the filename matches an entry in the skip_file, don't prompt for direction
# skip_file = nil
directory = config.fetch(:directory)
directory.glob("**/.git").each do |filename|
  repository = filename.dirname
  next if config[:shallow] && repository.dirname != directory
  if !(`cd #{repository}; git status`.include?("working tree clean"))
    uncleans << repository
    next
  end
  if !system("cd #{repository} && git branch | grep #{config.fetch(:from)}")
    if system("cd #{repository} && git branch | grep #{config.fetch(:to)}")
      from_branch_missing_but_has_to_branch << repository
    else
      from_branch_missing << repository
    end
  end

  # next unless user says to rename local :from_branch_name to :to_branch_name
  # Assumes that upstream no longer has the :from_branch_name
  #
  #
  # git checkout :from_branch_name
  # git pull
  # git branch -m :from_branch_name :to_branch_name
  # end
end

puts "# Clone Branch Fixer Report"
puts ""
puts "## Configuration"
puts ""
config.each_pair do |key, value|
  puts "* **#{key}**: #{value}"
end
puts ""
puts "## Dirty Repositories"
puts ""
uncleans.each do |repository|
  puts "* #{repository.relative_path_from(config.fetch(:directory))}"
end
puts ""
puts "## Missing From Branch and Does NOT Have to Branch"
puts ""
from_branch_missing.each do |repository|
  puts "* #{repository.relative_path_from(config.fetch(:directory))}"
end
puts ""
puts "## Missing From Branch and Has to Branch"
puts ""
from_branch_missing_but_has_to_branch.each do |repository|
  puts "* #{repository.relative_path_from(config.fetch(:directory))}"
end
