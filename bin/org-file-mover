#!/usr/bin/env ruby -wU

# This script is responsible for moving an org file from one location
# to another.
#
# - [X] Move the file
# - [ ] Move the file's attachments
# - [X] Fix inbound links to the file
# - [X] Fix outbound links in the to file

require 'optparse'
require 'pathname'
require 'fileutils'
config = {
  org_directory: File.join(ENV['HOME'], 'git/org'),
  do_it: false
}

command_name = File.basename(__FILE__)
require 'optparse'

optparse = OptionParser.new do |options|
  # This banner is the first line of your help documentation.
  options.set_banner "Usage: #{command_name} [options]\n\n" \
                     "Move an org file from one location to another.\n\n"

  options.on_head("-f FROM", "--from", String, "The path and basename of the file we're moving") do |from|
    config[:from] = from
  end

  options.on("-r RENAME", "--rename", String, "Rename FROM to the given value") do |rename|
    config[:rename] = rename
  end

  options.on("-t TO", "--to", String, "The directory to where we're moving the file") do |to|
    config[:to] = to
  end

  options.on("-o ORG_DIRECTORY", "--org-directory", String, %(The absolute path to the org directory\n#{' ' * 37}(Default: "#{config.fetch(:org_directory)}"))) do |org_directory|
    config[:org_directory] = org_directory
  end

  options.on('-d', 'Do it! Replace without confirmation.') do |_do_it|
    config[:do_it] = true
  end

  options.separator('')

  options.on_tail('-h', '--help', "You're looking at it!") do
    warn options
    exit 1
  end
end

begin
  optparse.parse!
  config[:rename] ||= File.basename(config[:from])
  mandatory = %i[from org_directory to]
  # Verify minimum viable switches
  missing = mandatory.select { |param| config[param].nil? }
  raise OptionParser::MissingArgument, missing.join(', ') unless missing.empty?

  # Verify that to is a directory in org
  @absolute_to_dirname = config[:to].start_with?("/") ? config[:to] : File.expand_path(config[:to], Dir.pwd)
  raise OptionParser::InvalidOption, "Invalid destination: TO must be in ORG_DIRECTORY" unless @absolute_to_dirname.start_with?(config[:org_directory])
  # Verify that from is a file in the org
  @absolute_from_dirname = config[:from].start_with?("/") ? config[:from] : File.expand_path(config[:from], Dir.pwd)
  raise OptionParser::InvalidOption, "Invalid destination: FROM must be in ORG_DIRECTORY" unless @absolute_from_dirname.start_with?(config[:org_directory])
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
  warn "\e[0m\e[1m\e[31m#{$!}\e[0m\n"
  warn optparse
  exit
end

################################################################################
# Find all of the links to the given FROM
class Link
  AG_RESULT_REGEXP = %r{^(?<source_filename>[^:]+):\[\[file:(?<target_path>[^\]]+)\]\[(?<target_name>[^\]]+)\]}
  def initialize(line:)
    @line = line
    match = AG_RESULT_REGEXP.match(line)
    @linking_filename = Pathname.new(match[:source_filename])
    @original_target_path = match[:target_path]
    @original_target_name = match[:target_name]
  end
  attr_reader :linking_filename, :original_target_path, :original_target_name
end

from_basename = File.basename(config.fetch(:from))
links_to_the_from_command_args = [
  "ag",
  "--only-matching",
  "--nocolor",
  "--nonumbers",
  "--noheading",
  "\\[\\[file:[^\\]]*#{from_basename}[^\\]]*\\]\\[[^\\]]+\]\]",
  config.fetch(:org_directory)
]
linking_to_the_from = []
require 'open3'
Open3.pipeline_r(links_to_the_from_command_args) do |o|
  while line = o.gets
    next if line.strip.empty?
    linking_to_the_from << Link.new(line: line.strip)
  end
end

################################################################################
# Move the FROM to TO
from_pathname = Pathname.new(@absolute_from_dirname)
to_pathname = Pathname.new(File.join(@absolute_to_dirname, config.fetch(:rename)))
mover = config.fetch(:do_it) ? FileUtils : FileUtils::DryRun

################################################################################
# Move any attachments associated with the file
if from_pathname.dirname != to_pathname.dirname
  class Attachment
    AG_RESULT_REGEXP = %r{^(?<source_filename>[^:]+):(?<line_number>\d+)::ID: +(?<id_prefix>[\w\d-]{2})(?<id_suffix>[\w\d-]+)}
    def initialize(line:, mover:, from_pathname:, to_pathname:)
      @line = line
      @mover = mover
      @from_pathname = from_pathname
      @to_pathname = to_pathname
      match = AG_RESULT_REGEXP.match(line)
      @source_path = Pathname.new(match[:source_filename])
      @line_number = match[:line_number]
      @id_prefix = match[:id_prefix]
      @id_suffix = match[:id_suffix]
    end

    def move!
      from_attachment_dirname = @from_pathname.dirname.join("data", @id_prefix, @id_suffix)
      return :no_attachment_for_id unless from_attachment_dirname.exist?
      # Make the target data directory
      to_attachment_parent_dirname = @to_pathname.dirname.join("data", @id_prefix)
      @mover.mkdir_p(to_attachment_parent_dirname)
      @mover.mv(from_attachment_dirname, to_attachment_parent_dirname)
    end
  end



  list_org_ids_command = [
    "ag",
    "--only-matching",
    "--nocolor",
    "--noheading",
    '":ID: +[\w\d-]+"',
    from_pathname.to_s
  ]
  `#{list_org_ids_command.join(' ')}`.split("\n") do |line|
    line.strip!
    next if line.empty?
    Attachment.new(line: line, mover: mover, from_pathname: from_pathname, to_pathname: to_pathname).move!
  end
end

################################################################################
# Move the FROM file to the TO destination
mover.mv(from_pathname, to_pathname) unless from_pathname == to_pathname

################################################################################
# Update all of the links to the given TO
linking_to_the_from.each do |link|
  new_target_path = to_pathname.relative_path_from(link.linking_filename.dirname)
  args = [
    "lil-regy",
    "-p", link.linking_filename.to_s,
    "-f", link.original_target_path,
    "-r", new_target_path.to_s
  ]
  args << "-d" if config.fetch(:do_it)
  Open3.pipeline_r(args) do |o|
    while out = o.gets
      puts out
    end
  end
end

################################################################################
# Update all of the outbound links in the given TO
inbound_links_command_args = [
  "ag",
  "--only-matching",
  "--nocolor",
  "--nonumbers",
  "--noheading",
  "\\[\\[file:[^\\]]+\\]\\[[^\\]]+\]\]"
]

if config[:do_it]
  inbound_links_command_args << to_pathname.to_s
else
  inbound_links_command_args << from_pathname.to_s
end

Open3.pipeline_r(inbound_links_command_args) do |o|
  while out = o.gets
    link = Link.new(line: out.strip)
    outbound_link_filename = Pathname.new(`find #{config.fetch(:org_directory)} -name "#{File.basename(link.original_target_path)}"`.strip)
    new_target_path = begin
                        if config[:do_it]
                          outbound_link_filename.relative_path_from(to_pathname.dirname)
                        else
                          outbound_link_filename.relative_path_from(from_pathname.dirname)
                        end
                      end
    args = [
      "lil-regy",
      "-p", link.linking_filename.to_s,
      "-f", link.original_target_path,
      "-r", new_target_path.to_s
    ]
    args << "-d" if config.fetch(:do_it)
    Open3.pipeline_r(args) do |o|
      while out = o.gets
        puts out
      end
    end
  end
end
